import {
  parse
} from "./chunk-HUEPXUOB.js";
import {
  convertElement,
  require_extend
} from "./chunk-TQYETJWH.js";
import {
  visit
} from "./chunk-VGG62YDC.js";
import "./chunk-6XJW5YQ2.js";
import {
  __toESM
} from "./chunk-2LSFTFF7.js";

// node_modules/is-absolute-url/index.js
var ABSOLUTE_URL_REGEX = /^[a-zA-Z][a-zA-Z\d+\-.]*?:/;
var WINDOWS_PATH_REGEX = /^[a-zA-Z]:\\/;
function isAbsoluteUrl(url) {
  if (typeof url !== "string") {
    throw new TypeError(`Expected a \`string\`, got \`${typeof url}\``);
  }
  if (WINDOWS_PATH_REGEX.test(url)) {
    return false;
  }
  return ABSOLUTE_URL_REGEX.test(url);
}

// node_modules/rehype-external-links/index.js
var import_extend = __toESM(require_extend());
var defaultRel = ["nofollow"];
var defaultProtocols = ["http", "https"];
function callIfNeeded(value, node) {
  return typeof value === "function" ? value(node) : value;
}
function rehypeExternalLinks(options = {}) {
  const is = convertElement(options.test);
  return (tree) => {
    visit(tree, "element", (node, index, parent) => {
      if (node.tagName === "a" && node.properties && typeof node.properties.href === "string" && is(node, index, parent)) {
        const url = node.properties.href;
        const protocol = url.slice(0, url.indexOf(":"));
        const target = callIfNeeded(options.target, node);
        const relRaw = callIfNeeded(options.rel, node) || defaultRel;
        const rel = typeof relRaw === "string" ? parse(relRaw) : relRaw;
        const protocols = callIfNeeded(options.protocols, node) || defaultProtocols;
        const contentRaw = callIfNeeded(options.content, node);
        const content = contentRaw && !Array.isArray(contentRaw) ? [contentRaw] : contentRaw;
        const contentProperties = callIfNeeded(options.contentProperties, node) || {};
        if (isAbsoluteUrl(url) ? protocols.includes(protocol) : url.startsWith("//")) {
          if (target) {
            node.properties.target = target;
          }
          if (rel.length > 0) {
            node.properties.rel = rel.concat();
          }
          if (content) {
            node.children.push({
              type: "element",
              tagName: "span",
              properties: (0, import_extend.default)(true, contentProperties),
              children: (0, import_extend.default)(true, content)
            });
          }
        }
      }
    });
  };
}
export {
  rehypeExternalLinks as default
};
//# sourceMappingURL=rehype-external-links.js.map
