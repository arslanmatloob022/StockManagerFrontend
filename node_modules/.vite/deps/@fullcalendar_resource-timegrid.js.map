{
  "version": 3,
  "sources": ["../../@fullcalendar/resource-daygrid/internal.js", "../../@fullcalendar/resource-timegrid/internal.js", "../../@fullcalendar/resource-timegrid/index.js"],
  "sourcesContent": ["import { DateComponent, mapHash, memoize } from '@fullcalendar/core/internal.js';\nimport { createRef, createElement } from '@fullcalendar/core/preact.js';\nimport { DayTableSlicer, Table, TableView, buildDayTableModel } from '@fullcalendar/daygrid/internal.js';\nimport { VResourceJoiner, VResourceSplitter, flattenResources, DEFAULT_RESOURCE_ORDER, ResourceDayHeader, DayResourceTableModel, ResourceDayTableModel } from '@fullcalendar/resource/internal.js';\n\nclass ResourceDayTableJoiner extends VResourceJoiner {\n    transformSeg(seg, resourceDayTableModel, resourceI) {\n        let colRanges = resourceDayTableModel.computeColRanges(seg.firstCol, seg.lastCol, resourceI);\n        return colRanges.map((colRange) => (Object.assign(Object.assign(Object.assign({}, seg), colRange), { isStart: seg.isStart && colRange.isStart, isEnd: seg.isEnd && colRange.isEnd })));\n    }\n}\n\nclass ResourceDayTable extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.splitter = new VResourceSplitter();\n        this.slicers = {};\n        this.joiner = new ResourceDayTableJoiner();\n        this.tableRef = createRef();\n        this.isHitComboAllowed = (hit0, hit1) => {\n            let allowAcrossResources = this.props.resourceDayTableModel.dayTableModel.colCnt === 1;\n            return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId;\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { resourceDayTableModel, nextDayThreshold, dateProfile } = props;\n        let splitProps = this.splitter.splitProps(props);\n        this.slicers = mapHash(splitProps, (split, resourceId) => this.slicers[resourceId] || new DayTableSlicer());\n        let slicedProps = mapHash(this.slicers, (slicer, resourceId) => slicer.sliceProps(splitProps[resourceId], dateProfile, nextDayThreshold, context, resourceDayTableModel.dayTableModel));\n        return (createElement(Table, Object.assign({ forPrint: props.forPrint, ref: this.tableRef }, this.joiner.joinProps(slicedProps, resourceDayTableModel), { cells: resourceDayTableModel.cells, dateProfile: dateProfile, colGroupNode: props.colGroupNode, tableMinWidth: props.tableMinWidth, renderRowIntro: props.renderRowIntro, dayMaxEvents: props.dayMaxEvents, dayMaxEventRows: props.dayMaxEventRows, showWeekNumbers: props.showWeekNumbers, expandRows: props.expandRows, headerAlignElRef: props.headerAlignElRef, clientWidth: props.clientWidth, clientHeight: props.clientHeight, isHitComboAllowed: this.isHitComboAllowed })));\n    }\n}\n\nclass ResourceDayTableView extends TableView {\n    constructor() {\n        super(...arguments);\n        this.flattenResources = memoize(flattenResources);\n        this.buildResourceDayTableModel = memoize(buildResourceDayTableModel);\n        this.headerRef = createRef();\n        this.tableRef = createRef();\n        // can't override any lifecycle methods from parent\n    }\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n        let resources = this.flattenResources(props.resourceStore, resourceOrderSpecs);\n        let resourceDayTableModel = this.buildResourceDayTableModel(props.dateProfile, context.dateProfileGenerator, resources, options.datesAboveResources, context);\n        let headerContent = options.dayHeaders && (createElement(ResourceDayHeader, { ref: this.headerRef, resources: resources, dateProfile: props.dateProfile, dates: resourceDayTableModel.dayTableModel.headerDates, datesRepDistinctDays: true }));\n        let bodyContent = (contentArg) => (createElement(ResourceDayTable, { ref: this.tableRef, dateProfile: props.dateProfile, resourceDayTableModel: resourceDayTableModel, businessHours: props.businessHours, eventStore: props.eventStore, eventUiBases: props.eventUiBases, dateSelection: props.dateSelection, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, dayMaxEvents: options.dayMaxEvents, dayMaxEventRows: options.dayMaxEventRows, showWeekNumbers: options.weekNumbers, expandRows: !props.isHeightAuto, headerAlignElRef: this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint }));\n        return options.dayMinWidth\n            ? this.renderHScrollLayout(headerContent, bodyContent, resourceDayTableModel.colCnt, options.dayMinWidth)\n            : this.renderSimpleLayout(headerContent, bodyContent);\n    }\n}\nfunction buildResourceDayTableModel(dateProfile, dateProfileGenerator, resources, datesAboveResources, context) {\n    let dayTable = buildDayTableModel(dateProfile, dateProfileGenerator);\n    return datesAboveResources ?\n        new DayResourceTableModel(dayTable, resources, context) :\n        new ResourceDayTableModel(dayTable, resources, context);\n}\n\nexport { ResourceDayTable, ResourceDayTableView };\n", "import { DateComponent, memoize, mapHash, NowTimer } from '@fullcalendar/core/internal.js';\nimport { createRef, createElement } from '@fullcalendar/core/preact.js';\nimport { buildDayRanges, DayTimeColsSlicer, TimeCols, TimeColsView, buildSlatMetas, buildTimeColsModel } from '@fullcalendar/timegrid/internal.js';\nimport { VResourceJoiner, VResourceSplitter, flattenResources, DEFAULT_RESOURCE_ORDER, ResourceDayHeader, DayResourceTableModel, ResourceDayTableModel } from '@fullcalendar/resource/internal.js';\nimport { ResourceDayTable } from '@fullcalendar/resource-daygrid/internal.js';\n\nclass ResourceDayTimeColsJoiner extends VResourceJoiner {\n    transformSeg(seg, resourceDayTable, resourceI) {\n        return [\n            Object.assign(Object.assign({}, seg), { col: resourceDayTable.computeCol(seg.col, resourceI) }),\n        ];\n    }\n}\n\nclass ResourceDayTimeCols extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.buildDayRanges = memoize(buildDayRanges);\n        this.splitter = new VResourceSplitter();\n        this.slicers = {};\n        this.joiner = new ResourceDayTimeColsJoiner();\n        this.timeColsRef = createRef();\n        this.isHitComboAllowed = (hit0, hit1) => {\n            let allowAcrossResources = this.dayRanges.length === 1;\n            return allowAcrossResources || hit0.dateSpan.resourceId === hit1.dateSpan.resourceId;\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { dateEnv, options } = context;\n        let { dateProfile, resourceDayTableModel } = props;\n        let dayRanges = this.dayRanges = this.buildDayRanges(resourceDayTableModel.dayTableModel, dateProfile, dateEnv);\n        let splitProps = this.splitter.splitProps(props);\n        this.slicers = mapHash(splitProps, (split, resourceId) => this.slicers[resourceId] || new DayTimeColsSlicer());\n        let slicedProps = mapHash(this.slicers, (slicer, resourceId) => slicer.sliceProps(splitProps[resourceId], dateProfile, null, context, dayRanges));\n        return ( // TODO: would move this further down hierarchy, but sliceNowDate needs it\n        createElement(NowTimer, { unit: options.nowIndicator ? 'minute' : 'day' }, (nowDate, todayRange) => (createElement(TimeCols, Object.assign({ ref: this.timeColsRef }, this.joiner.joinProps(slicedProps, resourceDayTableModel), { dateProfile: dateProfile, axis: props.axis, slotDuration: props.slotDuration, slatMetas: props.slatMetas, cells: resourceDayTableModel.cells[0], tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, clientWidth: props.clientWidth, clientHeight: props.clientHeight, expandRows: props.expandRows, nowDate: nowDate, nowIndicatorSegs: options.nowIndicator && this.buildNowIndicatorSegs(nowDate), todayRange: todayRange, onScrollTopRequest: props.onScrollTopRequest, forPrint: props.forPrint, onSlatCoords: props.onSlatCoords, isHitComboAllowed: this.isHitComboAllowed })))));\n    }\n    buildNowIndicatorSegs(date) {\n        let nonResourceSegs = this.slicers[''].sliceNowDate(date, this.props.dateProfile, this.context.options.nextDayThreshold, this.context, this.dayRanges);\n        return this.joiner.expandSegs(this.props.resourceDayTableModel, nonResourceSegs);\n    }\n}\n\nclass ResourceDayTimeColsView extends TimeColsView {\n    constructor() {\n        super(...arguments);\n        this.flattenResources = memoize(flattenResources);\n        this.buildResourceTimeColsModel = memoize(buildResourceTimeColsModel);\n        this.buildSlatMetas = memoize(buildSlatMetas);\n    }\n    render() {\n        let { props, context } = this;\n        let { options, dateEnv } = context;\n        let { dateProfile } = props;\n        let splitProps = this.allDaySplitter.splitProps(props);\n        let resourceOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n        let resources = this.flattenResources(props.resourceStore, resourceOrderSpecs);\n        let resourceDayTableModel = this.buildResourceTimeColsModel(dateProfile, context.dateProfileGenerator, resources, options.datesAboveResources, context);\n        let slatMetas = this.buildSlatMetas(dateProfile.slotMinTime, dateProfile.slotMaxTime, options.slotLabelInterval, options.slotDuration, dateEnv);\n        let { dayMinWidth } = options;\n        let hasAttachedAxis = !dayMinWidth;\n        let hasDetachedAxis = dayMinWidth;\n        let headerContent = options.dayHeaders && (createElement(ResourceDayHeader, { resources: resources, dates: resourceDayTableModel.dayTableModel.headerDates, dateProfile: dateProfile, datesRepDistinctDays: true, renderIntro: hasAttachedAxis ? this.renderHeadAxis : null }));\n        let allDayContent = (options.allDaySlot !== false) && ((contentArg) => (createElement(ResourceDayTable, Object.assign({}, splitProps.allDay, { dateProfile: dateProfile, resourceDayTableModel: resourceDayTableModel, nextDayThreshold: options.nextDayThreshold, tableMinWidth: contentArg.tableMinWidth, colGroupNode: contentArg.tableColGroupNode, renderRowIntro: hasAttachedAxis ? this.renderTableRowAxis : null, showWeekNumbers: false, expandRows: false, headerAlignElRef: this.headerElRef, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, forPrint: props.forPrint }, this.getAllDayMaxEventProps()))));\n        let timeGridContent = (contentArg) => (createElement(ResourceDayTimeCols, Object.assign({}, splitProps.timed, { dateProfile: dateProfile, axis: hasAttachedAxis, slotDuration: options.slotDuration, slatMetas: slatMetas, resourceDayTableModel: resourceDayTableModel, tableColGroupNode: contentArg.tableColGroupNode, tableMinWidth: contentArg.tableMinWidth, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, onSlatCoords: this.handleSlatCoords, expandRows: contentArg.expandRows, forPrint: props.forPrint, onScrollTopRequest: this.handleScrollTopRequest })));\n        return hasDetachedAxis\n            ? this.renderHScrollLayout(headerContent, allDayContent, timeGridContent, resourceDayTableModel.colCnt, dayMinWidth, slatMetas, this.state.slatCoords)\n            : this.renderSimpleLayout(headerContent, allDayContent, timeGridContent);\n    }\n}\nfunction buildResourceTimeColsModel(dateProfile, dateProfileGenerator, resources, datesAboveResources, context) {\n    let dayTable = buildTimeColsModel(dateProfile, dateProfileGenerator);\n    return datesAboveResources ?\n        new DayResourceTableModel(dayTable, resources, context) :\n        new ResourceDayTableModel(dayTable, resources, context);\n}\n\nexport { ResourceDayTimeCols, ResourceDayTimeColsView };\n", "import { createPlugin } from '@fullcalendar/core/index.js';\nimport premiumCommonPlugin from '@fullcalendar/premium-common/index.js';\nimport resourcePlugin from '@fullcalendar/resource/index.js';\nimport timeGridPlugin from '@fullcalendar/timegrid/index.js';\nimport { ResourceDayTimeColsView } from './internal.js';\nimport '@fullcalendar/core/internal.js';\nimport '@fullcalendar/core/preact.js';\nimport '@fullcalendar/timegrid/internal.js';\nimport '@fullcalendar/resource/internal.js';\nimport '@fullcalendar/resource-daygrid/internal.js';\n\nvar index = createPlugin({\n    name: '@fullcalendar/resource-timegrid',\n    premiumReleaseDate: '2024-07-12',\n    deps: [\n        premiumCommonPlugin,\n        resourcePlugin,\n        timeGridPlugin,\n    ],\n    initialView: 'resourceTimeGridDay',\n    views: {\n        resourceTimeGrid: {\n            type: 'timeGrid',\n            component: ResourceDayTimeColsView,\n            needsResourceData: true,\n        },\n        resourceTimeGridDay: {\n            type: 'resourceTimeGrid',\n            duration: { days: 1 },\n        },\n        resourceTimeGridWeek: {\n            type: 'resourceTimeGrid',\n            duration: { weeks: 1 },\n        },\n    },\n});\n\nexport { index as default };\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAM,yBAAN,cAAqC,gBAAgB;AAAA,EACjD,aAAa,KAAK,uBAAuB,WAAW;AAChD,QAAI,YAAY,sBAAsB,iBAAiB,IAAI,UAAU,IAAI,SAAS,SAAS;AAC3F,WAAO,UAAU,IAAI,CAAC,aAAc,OAAO,OAAO,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,QAAQ,GAAG,EAAE,SAAS,IAAI,WAAW,SAAS,SAAS,OAAO,IAAI,SAAS,SAAS,MAAM,CAAC,CAAE;AAAA,EACzL;AACJ;AAEA,IAAM,mBAAN,cAA+B,cAAc;AAAA,EACzC,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,WAAW,IAAI,kBAAkB;AACtC,SAAK,UAAU,CAAC;AAChB,SAAK,SAAS,IAAI,uBAAuB;AACzC,SAAK,WAAW,EAAU;AAC1B,SAAK,oBAAoB,CAAC,MAAM,SAAS;AACrC,UAAI,uBAAuB,KAAK,MAAM,sBAAsB,cAAc,WAAW;AACrF,aAAO,wBAAwB,KAAK,SAAS,eAAe,KAAK,SAAS;AAAA,IAC9E;AAAA,EACJ;AAAA,EACA,SAAS;AACL,QAAI,EAAE,OAAO,QAAQ,IAAI;AACzB,QAAI,EAAE,uBAAuB,kBAAkB,YAAY,IAAI;AAC/D,QAAI,aAAa,KAAK,SAAS,WAAW,KAAK;AAC/C,SAAK,UAAU,QAAQ,YAAY,CAAC,OAAO,eAAe,KAAK,QAAQ,UAAU,KAAK,IAAI,eAAe,CAAC;AAC1G,QAAI,cAAc,QAAQ,KAAK,SAAS,CAAC,QAAQ,eAAe,OAAO,WAAW,WAAW,UAAU,GAAG,aAAa,kBAAkB,SAAS,sBAAsB,aAAa,CAAC;AACtL,WAAQ,EAAc,OAAO,OAAO,OAAO,EAAE,UAAU,MAAM,UAAU,KAAK,KAAK,SAAS,GAAG,KAAK,OAAO,UAAU,aAAa,qBAAqB,GAAG,EAAE,OAAO,sBAAsB,OAAO,aAA0B,cAAc,MAAM,cAAc,eAAe,MAAM,eAAe,gBAAgB,MAAM,gBAAgB,cAAc,MAAM,cAAc,iBAAiB,MAAM,iBAAiB,iBAAiB,MAAM,iBAAiB,YAAY,MAAM,YAAY,kBAAkB,MAAM,kBAAkB,aAAa,MAAM,aAAa,cAAc,MAAM,cAAc,mBAAmB,KAAK,kBAAkB,CAAC,CAAC;AAAA,EAChnB;AACJ;;;AC1BA,IAAM,4BAAN,cAAwC,gBAAgB;AAAA,EACpD,aAAa,KAAK,kBAAkB,WAAW;AAC3C,WAAO;AAAA,MACH,OAAO,OAAO,OAAO,OAAO,CAAC,GAAG,GAAG,GAAG,EAAE,KAAK,iBAAiB,WAAW,IAAI,KAAK,SAAS,EAAE,CAAC;AAAA,IAClG;AAAA,EACJ;AACJ;AAEA,IAAM,sBAAN,cAAkC,cAAc;AAAA,EAC5C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,iBAAiB,QAAQ,cAAc;AAC5C,SAAK,WAAW,IAAI,kBAAkB;AACtC,SAAK,UAAU,CAAC;AAChB,SAAK,SAAS,IAAI,0BAA0B;AAC5C,SAAK,cAAc,EAAU;AAC7B,SAAK,oBAAoB,CAAC,MAAM,SAAS;AACrC,UAAI,uBAAuB,KAAK,UAAU,WAAW;AACrD,aAAO,wBAAwB,KAAK,SAAS,eAAe,KAAK,SAAS;AAAA,IAC9E;AAAA,EACJ;AAAA,EACA,SAAS;AACL,QAAI,EAAE,OAAO,QAAQ,IAAI;AACzB,QAAI,EAAE,SAAS,QAAQ,IAAI;AAC3B,QAAI,EAAE,aAAa,sBAAsB,IAAI;AAC7C,QAAI,YAAY,KAAK,YAAY,KAAK,eAAe,sBAAsB,eAAe,aAAa,OAAO;AAC9G,QAAI,aAAa,KAAK,SAAS,WAAW,KAAK;AAC/C,SAAK,UAAU,QAAQ,YAAY,CAAC,OAAO,eAAe,KAAK,QAAQ,UAAU,KAAK,IAAI,kBAAkB,CAAC;AAC7G,QAAI,cAAc,QAAQ,KAAK,SAAS,CAAC,QAAQ,eAAe,OAAO,WAAW,WAAW,UAAU,GAAG,aAAa,MAAM,SAAS,SAAS,CAAC;AAChJ;AAAA;AAAA,MACA,EAAc,UAAU,EAAE,MAAM,QAAQ,eAAe,WAAW,MAAM,GAAG,CAAC,SAAS,eAAgB,EAAc,UAAU,OAAO,OAAO,EAAE,KAAK,KAAK,YAAY,GAAG,KAAK,OAAO,UAAU,aAAa,qBAAqB,GAAG,EAAE,aAA0B,MAAM,MAAM,MAAM,cAAc,MAAM,cAAc,WAAW,MAAM,WAAW,OAAO,sBAAsB,MAAM,CAAC,GAAG,mBAAmB,MAAM,mBAAmB,eAAe,MAAM,eAAe,aAAa,MAAM,aAAa,cAAc,MAAM,cAAc,YAAY,MAAM,YAAY,SAAkB,kBAAkB,QAAQ,gBAAgB,KAAK,sBAAsB,OAAO,GAAG,YAAwB,oBAAoB,MAAM,oBAAoB,UAAU,MAAM,UAAU,cAAc,MAAM,cAAc,mBAAmB,KAAK,kBAAkB,CAAC,CAAC,CAAE;AAAA;AAAA,EACzzB;AAAA,EACA,sBAAsB,MAAM;AACxB,QAAI,kBAAkB,KAAK,QAAQ,EAAE,EAAE,aAAa,MAAM,KAAK,MAAM,aAAa,KAAK,QAAQ,QAAQ,kBAAkB,KAAK,SAAS,KAAK,SAAS;AACrJ,WAAO,KAAK,OAAO,WAAW,KAAK,MAAM,uBAAuB,eAAe;AAAA,EACnF;AACJ;AAEA,IAAM,0BAAN,cAAsC,aAAa;AAAA,EAC/C,cAAc;AACV,UAAM,GAAG,SAAS;AAClB,SAAK,mBAAmB,QAAQ,gBAAgB;AAChD,SAAK,6BAA6B,QAAQ,0BAA0B;AACpE,SAAK,iBAAiB,QAAQ,cAAc;AAAA,EAChD;AAAA,EACA,SAAS;AACL,QAAI,EAAE,OAAO,QAAQ,IAAI;AACzB,QAAI,EAAE,SAAS,QAAQ,IAAI;AAC3B,QAAI,EAAE,YAAY,IAAI;AACtB,QAAI,aAAa,KAAK,eAAe,WAAW,KAAK;AACrD,QAAI,qBAAqB,QAAQ,iBAAiB;AAClD,QAAI,YAAY,KAAK,iBAAiB,MAAM,eAAe,kBAAkB;AAC7E,QAAI,wBAAwB,KAAK,2BAA2B,aAAa,QAAQ,sBAAsB,WAAW,QAAQ,qBAAqB,OAAO;AACtJ,QAAI,YAAY,KAAK,eAAe,YAAY,aAAa,YAAY,aAAa,QAAQ,mBAAmB,QAAQ,cAAc,OAAO;AAC9I,QAAI,EAAE,YAAY,IAAI;AACtB,QAAI,kBAAkB,CAAC;AACvB,QAAI,kBAAkB;AACtB,QAAI,gBAAgB,QAAQ,cAAe,EAAc,mBAAmB,EAAE,WAAsB,OAAO,sBAAsB,cAAc,aAAa,aAA0B,sBAAsB,MAAM,aAAa,kBAAkB,KAAK,iBAAiB,KAAK,CAAC;AAC7Q,QAAI,gBAAiB,QAAQ,eAAe,UAAW,CAAC,eAAgB,EAAc,kBAAkB,OAAO,OAAO,CAAC,GAAG,WAAW,QAAQ,EAAE,aAA0B,uBAA8C,kBAAkB,QAAQ,kBAAkB,eAAe,WAAW,eAAe,cAAc,WAAW,mBAAmB,gBAAgB,kBAAkB,KAAK,qBAAqB,MAAM,iBAAiB,OAAO,YAAY,OAAO,kBAAkB,KAAK,aAAa,aAAa,WAAW,aAAa,cAAc,WAAW,cAAc,UAAU,MAAM,SAAS,GAAG,KAAK,uBAAuB,CAAC,CAAC;AAC/mB,QAAI,kBAAkB,CAAC,eAAgB,EAAc,qBAAqB,OAAO,OAAO,CAAC,GAAG,WAAW,OAAO,EAAE,aAA0B,MAAM,iBAAiB,cAAc,QAAQ,cAAc,WAAsB,uBAA8C,mBAAmB,WAAW,mBAAmB,eAAe,WAAW,eAAe,aAAa,WAAW,aAAa,cAAc,WAAW,cAAc,cAAc,KAAK,kBAAkB,YAAY,WAAW,YAAY,UAAU,MAAM,UAAU,oBAAoB,KAAK,uBAAuB,CAAC,CAAC;AACnkB,WAAO,kBACD,KAAK,oBAAoB,eAAe,eAAe,iBAAiB,sBAAsB,QAAQ,aAAa,WAAW,KAAK,MAAM,UAAU,IACnJ,KAAK,mBAAmB,eAAe,eAAe,eAAe;AAAA,EAC/E;AACJ;AACA,SAAS,2BAA2B,aAAa,sBAAsB,WAAW,qBAAqB,SAAS;AAC5G,MAAI,WAAW,mBAAmB,aAAa,oBAAoB;AACnE,SAAO,sBACH,IAAI,sBAAsB,UAAU,WAAW,OAAO,IACtD,IAAI,sBAAsB,UAAU,WAAW,OAAO;AAC9D;;;ACjEA,IAAIA,SAAQ,aAAa;AAAA,EACrB,MAAM;AAAA,EACN,oBAAoB;AAAA,EACpB,MAAM;AAAA,IACF;AAAA,IACAA;AAAA,IACAA;AAAA,EACJ;AAAA,EACA,aAAa;AAAA,EACb,OAAO;AAAA,IACH,kBAAkB;AAAA,MACd,MAAM;AAAA,MACN,WAAW;AAAA,MACX,mBAAmB;AAAA,IACvB;AAAA,IACA,qBAAqB;AAAA,MACjB,MAAM;AAAA,MACN,UAAU,EAAE,MAAM,EAAE;AAAA,IACxB;AAAA,IACA,sBAAsB;AAAA,MAClB,MAAM;AAAA,MACN,UAAU,EAAE,OAAO,EAAE;AAAA,IACzB;AAAA,EACJ;AACJ,CAAC;",
  "names": ["index"]
}
