{
  "version": 3,
  "sources": ["../../@fullcalendar/timeline/internal.js", "../../@fullcalendar/timeline/index.js", "../../@fullcalendar/resource-timeline/internal.js", "../../@fullcalendar/resource-timeline/index.js"],
  "sourcesContent": ["import { config, createFormatter, greatestDurationDenominator, asCleanDays, createDuration, wholeDivideDurations, asRoughMs, addDays, startOfDay, asRoughSeconds, asRoughMinutes, diffWholeDays, isInt, computeVisibleDayRange, padStart, BaseComponent, memoizeObjArg, memoize, getDateMeta, ContentContainer, getSlotClassNames, getDayClassNames, buildNavLinkAttrs, PositionCache, findDirectChildren, rangeContainsMarker, NowTimer, NowIndicatorContainer, findElements, RefMap, multiplyDuration, SegHierarchy, groupIntersectingEntries, buildIsoString, computeEarliestSegStart, buildEventRangeKey, BgEvent, getSegMeta, renderFill, Slicer, intersectRanges, addMs, StandardEvent, MoreLinkContainer, sortEventSegs, mapHash, isPropsEqual, DateComponent, getStickyHeaderDates, getStickyFooterScrollbar, ViewContainer, renderScrollShim, injectStyles } from '@fullcalendar/core/internal.js';\nimport { createElement, Fragment, createRef } from '@fullcalendar/core/preact.js';\nimport { ScrollGrid } from '@fullcalendar/scrollgrid/internal.js';\n\nconst MIN_AUTO_LABELS = 18; // more than `12` months but less that `24` hours\nconst MAX_AUTO_SLOTS_PER_LABEL = 6; // allows 6 10-min slots in an hour\nconst MAX_AUTO_CELLS = 200; // allows 4-days to have a :30 slot duration\nconfig.MAX_TIMELINE_SLOTS = 1000;\n// potential nice values for slot-duration and interval-duration\nconst STOCK_SUB_DURATIONS = [\n    { years: 1 },\n    { months: 1 },\n    { days: 1 },\n    { hours: 1 },\n    { minutes: 30 },\n    { minutes: 15 },\n    { minutes: 10 },\n    { minutes: 5 },\n    { minutes: 1 },\n    { seconds: 30 },\n    { seconds: 15 },\n    { seconds: 10 },\n    { seconds: 5 },\n    { seconds: 1 },\n    { milliseconds: 500 },\n    { milliseconds: 100 },\n    { milliseconds: 10 },\n    { milliseconds: 1 },\n];\nfunction buildTimelineDateProfile(dateProfile, dateEnv, allOptions, dateProfileGenerator) {\n    let tDateProfile = {\n        labelInterval: allOptions.slotLabelInterval,\n        slotDuration: allOptions.slotDuration,\n    };\n    validateLabelAndSlot(tDateProfile, dateProfile, dateEnv); // validate after computed grid duration\n    ensureLabelInterval(tDateProfile, dateProfile, dateEnv);\n    ensureSlotDuration(tDateProfile, dateProfile, dateEnv);\n    let input = allOptions.slotLabelFormat;\n    let rawFormats = Array.isArray(input) ? input :\n        (input != null) ? [input] :\n            computeHeaderFormats(tDateProfile, dateProfile, dateEnv, allOptions);\n    tDateProfile.headerFormats = rawFormats.map((rawFormat) => createFormatter(rawFormat));\n    tDateProfile.isTimeScale = Boolean(tDateProfile.slotDuration.milliseconds);\n    let largeUnit = null;\n    if (!tDateProfile.isTimeScale) {\n        const slotUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n        if (/year|month|week/.test(slotUnit)) {\n            largeUnit = slotUnit;\n        }\n    }\n    tDateProfile.largeUnit = largeUnit;\n    tDateProfile.emphasizeWeeks =\n        asCleanDays(tDateProfile.slotDuration) === 1 &&\n            currentRangeAs('weeks', dateProfile, dateEnv) >= 2 &&\n            !allOptions.businessHours;\n    /*\n    console.log('label interval =', timelineView.labelInterval.humanize())\n    console.log('slot duration =', timelineView.slotDuration.humanize())\n    console.log('header formats =', timelineView.headerFormats)\n    console.log('isTimeScale', timelineView.isTimeScale)\n    console.log('largeUnit', timelineView.largeUnit)\n    */\n    let rawSnapDuration = allOptions.snapDuration;\n    let snapDuration;\n    let snapsPerSlot;\n    if (rawSnapDuration) {\n        snapDuration = createDuration(rawSnapDuration);\n        snapsPerSlot = wholeDivideDurations(tDateProfile.slotDuration, snapDuration);\n        // ^ TODO: warning if not whole?\n    }\n    if (snapsPerSlot == null) {\n        snapDuration = tDateProfile.slotDuration;\n        snapsPerSlot = 1;\n    }\n    tDateProfile.snapDuration = snapDuration;\n    tDateProfile.snapsPerSlot = snapsPerSlot;\n    // more...\n    let timeWindowMs = asRoughMs(dateProfile.slotMaxTime) - asRoughMs(dateProfile.slotMinTime);\n    // TODO: why not use normalizeRange!?\n    let normalizedStart = normalizeDate(dateProfile.renderRange.start, tDateProfile, dateEnv);\n    let normalizedEnd = normalizeDate(dateProfile.renderRange.end, tDateProfile, dateEnv);\n    // apply slotMinTime/slotMaxTime\n    // TODO: View should be responsible.\n    if (tDateProfile.isTimeScale) {\n        normalizedStart = dateEnv.add(normalizedStart, dateProfile.slotMinTime);\n        normalizedEnd = dateEnv.add(addDays(normalizedEnd, -1), dateProfile.slotMaxTime);\n    }\n    tDateProfile.timeWindowMs = timeWindowMs;\n    tDateProfile.normalizedRange = { start: normalizedStart, end: normalizedEnd };\n    let slotDates = [];\n    let date = normalizedStart;\n    while (date < normalizedEnd) {\n        if (isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator)) {\n            slotDates.push(date);\n        }\n        date = dateEnv.add(date, tDateProfile.slotDuration);\n    }\n    tDateProfile.slotDates = slotDates;\n    // more...\n    let snapIndex = -1;\n    let snapDiff = 0; // index of the diff :(\n    const snapDiffToIndex = [];\n    const snapIndexToDiff = [];\n    date = normalizedStart;\n    while (date < normalizedEnd) {\n        if (isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator)) {\n            snapIndex += 1;\n            snapDiffToIndex.push(snapIndex);\n            snapIndexToDiff.push(snapDiff);\n        }\n        else {\n            snapDiffToIndex.push(snapIndex + 0.5);\n        }\n        date = dateEnv.add(date, tDateProfile.snapDuration);\n        snapDiff += 1;\n    }\n    tDateProfile.snapDiffToIndex = snapDiffToIndex;\n    tDateProfile.snapIndexToDiff = snapIndexToDiff;\n    tDateProfile.snapCnt = snapIndex + 1; // is always one behind\n    tDateProfile.slotCnt = tDateProfile.snapCnt / tDateProfile.snapsPerSlot;\n    // more...\n    tDateProfile.isWeekStarts = buildIsWeekStarts(tDateProfile, dateEnv);\n    tDateProfile.cellRows = buildCellRows(tDateProfile, dateEnv);\n    tDateProfile.slotsPerLabel = wholeDivideDurations(tDateProfile.labelInterval, tDateProfile.slotDuration);\n    return tDateProfile;\n}\n/*\nsnaps to appropriate unit\n*/\nfunction normalizeDate(date, tDateProfile, dateEnv) {\n    let normalDate = date;\n    if (!tDateProfile.isTimeScale) {\n        normalDate = startOfDay(normalDate);\n        if (tDateProfile.largeUnit) {\n            normalDate = dateEnv.startOf(normalDate, tDateProfile.largeUnit);\n        }\n    }\n    return normalDate;\n}\n/*\nsnaps to appropriate unit\n*/\nfunction normalizeRange(range, tDateProfile, dateEnv) {\n    if (!tDateProfile.isTimeScale) {\n        range = computeVisibleDayRange(range);\n        if (tDateProfile.largeUnit) {\n            let dayRange = range; // preserve original result\n            range = {\n                start: dateEnv.startOf(range.start, tDateProfile.largeUnit),\n                end: dateEnv.startOf(range.end, tDateProfile.largeUnit),\n            };\n            // if date is partially through the interval, or is in the same interval as the start,\n            // make the exclusive end be the *next* interval\n            if (range.end.valueOf() !== dayRange.end.valueOf() || range.end <= range.start) {\n                range = {\n                    start: range.start,\n                    end: dateEnv.add(range.end, tDateProfile.slotDuration),\n                };\n            }\n        }\n    }\n    return range;\n}\nfunction isValidDate(date, tDateProfile, dateProfile, dateProfileGenerator) {\n    if (dateProfileGenerator.isHiddenDay(date)) {\n        return false;\n    }\n    if (tDateProfile.isTimeScale) {\n        // determine if the time is within slotMinTime/slotMaxTime, which may have wacky values\n        let day = startOfDay(date);\n        let timeMs = date.valueOf() - day.valueOf();\n        let ms = timeMs - asRoughMs(dateProfile.slotMinTime); // milliseconds since slotMinTime\n        ms = ((ms % 86400000) + 86400000) % 86400000; // make negative values wrap to 24hr clock\n        return ms < tDateProfile.timeWindowMs; // before the slotMaxTime?\n    }\n    return true;\n}\nfunction validateLabelAndSlot(tDateProfile, dateProfile, dateEnv) {\n    const { currentRange } = dateProfile;\n    // make sure labelInterval doesn't exceed the max number of cells\n    if (tDateProfile.labelInterval) {\n        const labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.labelInterval);\n        if (labelCnt > config.MAX_TIMELINE_SLOTS) {\n            console.warn('slotLabelInterval results in too many cells');\n            tDateProfile.labelInterval = null;\n        }\n    }\n    // make sure slotDuration doesn't exceed the maximum number of cells\n    if (tDateProfile.slotDuration) {\n        const slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, tDateProfile.slotDuration);\n        if (slotCnt > config.MAX_TIMELINE_SLOTS) {\n            console.warn('slotDuration results in too many cells');\n            tDateProfile.slotDuration = null;\n        }\n    }\n    // make sure labelInterval is a multiple of slotDuration\n    if (tDateProfile.labelInterval && tDateProfile.slotDuration) {\n        const slotsPerLabel = wholeDivideDurations(tDateProfile.labelInterval, tDateProfile.slotDuration);\n        if (slotsPerLabel === null || slotsPerLabel < 1) {\n            console.warn('slotLabelInterval must be a multiple of slotDuration');\n            tDateProfile.slotDuration = null;\n        }\n    }\n}\nfunction ensureLabelInterval(tDateProfile, dateProfile, dateEnv) {\n    const { currentRange } = dateProfile;\n    let { labelInterval } = tDateProfile;\n    if (!labelInterval) {\n        // compute based off the slot duration\n        // find the largest label interval with an acceptable slots-per-label\n        let input;\n        if (tDateProfile.slotDuration) {\n            for (input of STOCK_SUB_DURATIONS) {\n                const tryLabelInterval = createDuration(input);\n                const slotsPerLabel = wholeDivideDurations(tryLabelInterval, tDateProfile.slotDuration);\n                if (slotsPerLabel !== null && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {\n                    labelInterval = tryLabelInterval;\n                    break;\n                }\n            }\n            // use the slot duration as a last resort\n            if (!labelInterval) {\n                labelInterval = tDateProfile.slotDuration;\n            }\n            // compute based off the view's duration\n            // find the largest label interval that yields the minimum number of labels\n        }\n        else {\n            for (input of STOCK_SUB_DURATIONS) {\n                labelInterval = createDuration(input);\n                const labelCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, labelInterval);\n                if (labelCnt >= MIN_AUTO_LABELS) {\n                    break;\n                }\n            }\n        }\n        tDateProfile.labelInterval = labelInterval;\n    }\n    return labelInterval;\n}\nfunction ensureSlotDuration(tDateProfile, dateProfile, dateEnv) {\n    const { currentRange } = dateProfile;\n    let { slotDuration } = tDateProfile;\n    if (!slotDuration) {\n        const labelInterval = ensureLabelInterval(tDateProfile, dateProfile, dateEnv); // will compute if necessary\n        // compute based off the label interval\n        // find the largest slot duration that is different from labelInterval, but still acceptable\n        for (let input of STOCK_SUB_DURATIONS) {\n            const trySlotDuration = createDuration(input);\n            const slotsPerLabel = wholeDivideDurations(labelInterval, trySlotDuration);\n            if (slotsPerLabel !== null && slotsPerLabel > 1 && slotsPerLabel <= MAX_AUTO_SLOTS_PER_LABEL) {\n                slotDuration = trySlotDuration;\n                break;\n            }\n        }\n        // only allow the value if it won't exceed the view's # of slots limit\n        if (slotDuration) {\n            const slotCnt = dateEnv.countDurationsBetween(currentRange.start, currentRange.end, slotDuration);\n            if (slotCnt > MAX_AUTO_CELLS) {\n                slotDuration = null;\n            }\n        }\n        // use the label interval as a last resort\n        if (!slotDuration) {\n            slotDuration = labelInterval;\n        }\n        tDateProfile.slotDuration = slotDuration;\n    }\n    return slotDuration;\n}\nfunction computeHeaderFormats(tDateProfile, dateProfile, dateEnv, allOptions) {\n    let format1;\n    let format2;\n    const { labelInterval } = tDateProfile;\n    let unit = greatestDurationDenominator(labelInterval).unit;\n    const weekNumbersVisible = allOptions.weekNumbers;\n    let format0 = (format1 = (format2 = null));\n    // NOTE: weekNumber computation function wont work\n    if ((unit === 'week') && !weekNumbersVisible) {\n        unit = 'day';\n    }\n    switch (unit) {\n        case 'year':\n            format0 = { year: 'numeric' }; // '2015'\n            break;\n        case 'month':\n            if (currentRangeAs('years', dateProfile, dateEnv) > 1) {\n                format0 = { year: 'numeric' }; // '2015'\n            }\n            format1 = { month: 'short' }; // 'Jan'\n            break;\n        case 'week':\n            if (currentRangeAs('years', dateProfile, dateEnv) > 1) {\n                format0 = { year: 'numeric' }; // '2015'\n            }\n            format1 = { week: 'narrow' }; // 'Wk4'\n            break;\n        case 'day':\n            if (currentRangeAs('years', dateProfile, dateEnv) > 1) {\n                format0 = { year: 'numeric', month: 'long' }; // 'January 2014'\n            }\n            else if (currentRangeAs('months', dateProfile, dateEnv) > 1) {\n                format0 = { month: 'long' }; // 'January'\n            }\n            if (weekNumbersVisible) {\n                format1 = { week: 'short' }; // 'Wk 4'\n            }\n            format2 = { weekday: 'narrow', day: 'numeric' }; // 'Su 9'\n            break;\n        case 'hour':\n            if (weekNumbersVisible) {\n                format0 = { week: 'short' }; // 'Wk 4'\n            }\n            if (currentRangeAs('days', dateProfile, dateEnv) > 1) {\n                format1 = { weekday: 'short', day: 'numeric', month: 'numeric', omitCommas: true }; // Sat 4/7\n            }\n            format2 = {\n                hour: 'numeric',\n                minute: '2-digit',\n                omitZeroMinute: true,\n                meridiem: 'short',\n            };\n            break;\n        case 'minute':\n            // sufficiently large number of different minute cells?\n            if ((asRoughMinutes(labelInterval) / 60) >= MAX_AUTO_SLOTS_PER_LABEL) {\n                format0 = {\n                    hour: 'numeric',\n                    meridiem: 'short',\n                };\n                format1 = (params) => (':' + padStart(params.date.minute, 2) // ':30'\n                );\n            }\n            else {\n                format0 = {\n                    hour: 'numeric',\n                    minute: 'numeric',\n                    meridiem: 'short',\n                };\n            }\n            break;\n        case 'second':\n            // sufficiently large number of different second cells?\n            if ((asRoughSeconds(labelInterval) / 60) >= MAX_AUTO_SLOTS_PER_LABEL) {\n                format0 = { hour: 'numeric', minute: '2-digit', meridiem: 'lowercase' }; // '8:30 PM'\n                format1 = (params) => (':' + padStart(params.date.second, 2) // ':30'\n                );\n            }\n            else {\n                format0 = { hour: 'numeric', minute: '2-digit', second: '2-digit', meridiem: 'lowercase' }; // '8:30:45 PM'\n            }\n            break;\n        case 'millisecond':\n            format0 = { hour: 'numeric', minute: '2-digit', second: '2-digit', meridiem: 'lowercase' }; // '8:30:45 PM'\n            format1 = (params) => ('.' + padStart(params.millisecond, 3));\n            break;\n    }\n    return [].concat(format0 || [], format1 || [], format2 || []);\n}\n// Compute the number of the give units in the \"current\" range.\n// Won't go more precise than days.\n// Will return `0` if there's not a clean whole interval.\nfunction currentRangeAs(unit, dateProfile, dateEnv) {\n    let range = dateProfile.currentRange;\n    let res = null;\n    if (unit === 'years') {\n        res = dateEnv.diffWholeYears(range.start, range.end);\n    }\n    else if (unit === 'months') {\n        res = dateEnv.diffWholeMonths(range.start, range.end);\n    }\n    else if (unit === 'weeks') {\n        res = dateEnv.diffWholeMonths(range.start, range.end);\n    }\n    else if (unit === 'days') {\n        res = diffWholeDays(range.start, range.end);\n    }\n    return res || 0;\n}\nfunction buildIsWeekStarts(tDateProfile, dateEnv) {\n    let { slotDates, emphasizeWeeks } = tDateProfile;\n    let prevWeekNumber = null;\n    let isWeekStarts = [];\n    for (let slotDate of slotDates) {\n        let weekNumber = dateEnv.computeWeekNumber(slotDate);\n        let isWeekStart = emphasizeWeeks && (prevWeekNumber !== null) && (prevWeekNumber !== weekNumber);\n        prevWeekNumber = weekNumber;\n        isWeekStarts.push(isWeekStart);\n    }\n    return isWeekStarts;\n}\nfunction buildCellRows(tDateProfile, dateEnv) {\n    let slotDates = tDateProfile.slotDates;\n    let formats = tDateProfile.headerFormats;\n    let cellRows = formats.map(() => []); // indexed by row,col\n    let slotAsDays = asCleanDays(tDateProfile.slotDuration);\n    let guessedSlotUnit = slotAsDays === 7 ? 'week' :\n        slotAsDays === 1 ? 'day' :\n            null;\n    // specifically for navclicks\n    let rowUnitsFromFormats = formats.map((format) => (format.getLargestUnit ? format.getLargestUnit() : null));\n    // builds cellRows and slotCells\n    for (let i = 0; i < slotDates.length; i += 1) {\n        let date = slotDates[i];\n        let isWeekStart = tDateProfile.isWeekStarts[i];\n        for (let row = 0; row < formats.length; row += 1) {\n            let format = formats[row];\n            let rowCells = cellRows[row];\n            let leadingCell = rowCells[rowCells.length - 1];\n            let isLastRow = row === formats.length - 1;\n            let isSuperRow = formats.length > 1 && !isLastRow; // more than one row and not the last\n            let newCell = null;\n            let rowUnit = rowUnitsFromFormats[row] || (isLastRow ? guessedSlotUnit : null);\n            if (isSuperRow) {\n                let text = dateEnv.format(date, format);\n                if (!leadingCell || (leadingCell.text !== text)) {\n                    newCell = buildCellObject(date, text, rowUnit);\n                }\n                else {\n                    leadingCell.colspan += 1;\n                }\n            }\n            else if (!leadingCell ||\n                isInt(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.labelInterval))) {\n                let text = dateEnv.format(date, format);\n                newCell = buildCellObject(date, text, rowUnit);\n            }\n            else {\n                leadingCell.colspan += 1;\n            }\n            if (newCell) {\n                newCell.weekStart = isWeekStart;\n                rowCells.push(newCell);\n            }\n        }\n    }\n    return cellRows;\n}\nfunction buildCellObject(date, text, rowUnit) {\n    return { date, text, rowUnit, colspan: 1, isWeekStart: false };\n}\n\nclass TimelineHeaderTh extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.refineRenderProps = memoizeObjArg(refineRenderProps);\n        this.buildCellNavLinkAttrs = memoize(buildCellNavLinkAttrs);\n    }\n    render() {\n        let { props, context } = this;\n        let { dateEnv, options } = context;\n        let { cell, dateProfile, tDateProfile } = props;\n        // the cell.rowUnit is f'd\n        // giving 'month' for a 3-day view\n        // workaround: to infer day, do NOT time\n        let dateMeta = getDateMeta(cell.date, props.todayRange, props.nowDate, dateProfile);\n        let renderProps = this.refineRenderProps({\n            level: props.rowLevel,\n            dateMarker: cell.date,\n            text: cell.text,\n            dateEnv: context.dateEnv,\n            viewApi: context.viewApi,\n        });\n        return (createElement(ContentContainer, { elTag: \"th\", elClasses: [\n                'fc-timeline-slot',\n                'fc-timeline-slot-label',\n                cell.isWeekStart && 'fc-timeline-slot-em',\n                ...( // TODO: so slot classnames for week/month/bigger. see note above about rowUnit\n                cell.rowUnit === 'time' ?\n                    getSlotClassNames(dateMeta, context.theme) :\n                    getDayClassNames(dateMeta, context.theme)),\n            ], elAttrs: {\n                colSpan: cell.colspan,\n                'data-date': dateEnv.formatIso(cell.date, {\n                    omitTime: !tDateProfile.isTimeScale,\n                    omitTimeZoneOffset: true,\n                }),\n            }, renderProps: renderProps, generatorName: \"slotLabelContent\", customGenerator: options.slotLabelContent, defaultGenerator: renderInnerContent, classNameGenerator: options.slotLabelClassNames, didMount: options.slotLabelDidMount, willUnmount: options.slotLabelWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-timeline-slot-frame\", style: { height: props.rowInnerHeight } },\n            createElement(InnerContent, { elTag: \"a\", elClasses: [\n                    'fc-timeline-slot-cushion',\n                    'fc-scrollgrid-sync-inner',\n                    props.isSticky && 'fc-sticky',\n                ], elAttrs: this.buildCellNavLinkAttrs(context, cell.date, cell.rowUnit) })))));\n    }\n}\nfunction buildCellNavLinkAttrs(context, cellDate, rowUnit) {\n    return (rowUnit && rowUnit !== 'time')\n        ? buildNavLinkAttrs(context, cellDate, rowUnit)\n        : {};\n}\nfunction renderInnerContent(renderProps) {\n    return renderProps.text;\n}\nfunction refineRenderProps(input) {\n    return {\n        level: input.level,\n        date: input.dateEnv.toDate(input.dateMarker),\n        view: input.viewApi,\n        text: input.text,\n    };\n}\n\nclass TimelineHeaderRows extends BaseComponent {\n    render() {\n        let { dateProfile, tDateProfile, rowInnerHeights, todayRange, nowDate } = this.props;\n        let { cellRows } = tDateProfile;\n        return (createElement(Fragment, null, cellRows.map((rowCells, rowLevel) => {\n            let isLast = rowLevel === cellRows.length - 1;\n            let isChrono = tDateProfile.isTimeScale && isLast; // the final row, with times?\n            let classNames = [\n                'fc-timeline-header-row',\n                isChrono ? 'fc-timeline-header-row-chrono' : '',\n            ];\n            return ( // eslint-disable-next-line react/no-array-index-key\n            createElement(\"tr\", { key: rowLevel, className: classNames.join(' ') }, rowCells.map((cell) => (createElement(TimelineHeaderTh, { key: cell.date.toISOString(), cell: cell, rowLevel: rowLevel, dateProfile: dateProfile, tDateProfile: tDateProfile, todayRange: todayRange, nowDate: nowDate, rowInnerHeight: rowInnerHeights && rowInnerHeights[rowLevel], isSticky: !isLast })))));\n        })));\n    }\n}\n\nclass TimelineCoords {\n    constructor(slatRootEl, // okay to expose?\n    slatEls, dateProfile, tDateProfile, dateEnv, isRtl) {\n        this.slatRootEl = slatRootEl;\n        this.dateProfile = dateProfile;\n        this.tDateProfile = tDateProfile;\n        this.dateEnv = dateEnv;\n        this.isRtl = isRtl;\n        this.outerCoordCache = new PositionCache(slatRootEl, slatEls, true, // isHorizontal\n        false);\n        // for the inner divs within the slats\n        // used for event rendering and scrollTime, to disregard slat border\n        this.innerCoordCache = new PositionCache(slatRootEl, findDirectChildren(slatEls, 'div'), true, // isHorizontal\n        false);\n    }\n    isDateInRange(date) {\n        return rangeContainsMarker(this.dateProfile.currentRange, date);\n    }\n    // results range from negative width of area to 0\n    dateToCoord(date) {\n        let { tDateProfile } = this;\n        let snapCoverage = this.computeDateSnapCoverage(date);\n        let slotCoverage = snapCoverage / tDateProfile.snapsPerSlot;\n        let slotIndex = Math.floor(slotCoverage);\n        slotIndex = Math.min(slotIndex, tDateProfile.slotCnt - 1);\n        let partial = slotCoverage - slotIndex;\n        let { innerCoordCache, outerCoordCache } = this;\n        if (this.isRtl) {\n            return outerCoordCache.originClientRect.width - (outerCoordCache.rights[slotIndex] -\n                (innerCoordCache.getWidth(slotIndex) * partial));\n        }\n        return (outerCoordCache.lefts[slotIndex] +\n            (innerCoordCache.getWidth(slotIndex) * partial));\n    }\n    rangeToCoords(range) {\n        return {\n            start: this.dateToCoord(range.start),\n            end: this.dateToCoord(range.end),\n        };\n    }\n    durationToCoord(duration) {\n        let { dateProfile, tDateProfile, dateEnv, isRtl } = this;\n        let coord = 0;\n        if (dateProfile) {\n            let date = dateEnv.add(dateProfile.activeRange.start, duration);\n            if (!tDateProfile.isTimeScale) {\n                date = startOfDay(date);\n            }\n            coord = this.dateToCoord(date);\n            // hack to overcome the left borders of non-first slat\n            if (!isRtl && coord) {\n                coord += 1;\n            }\n        }\n        return coord;\n    }\n    coordFromLeft(coord) {\n        if (this.isRtl) {\n            return this.outerCoordCache.originClientRect.width - coord;\n        }\n        return coord;\n    }\n    // returned value is between 0 and the number of snaps\n    computeDateSnapCoverage(date) {\n        return computeDateSnapCoverage(date, this.tDateProfile, this.dateEnv);\n    }\n}\n// returned value is between 0 and the number of snaps\nfunction computeDateSnapCoverage(date, tDateProfile, dateEnv) {\n    let snapDiff = dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, date, tDateProfile.snapDuration);\n    if (snapDiff < 0) {\n        return 0;\n    }\n    if (snapDiff >= tDateProfile.snapDiffToIndex.length) {\n        return tDateProfile.snapCnt;\n    }\n    let snapDiffInt = Math.floor(snapDiff);\n    let snapCoverage = tDateProfile.snapDiffToIndex[snapDiffInt];\n    if (isInt(snapCoverage)) { // not an in-between value\n        snapCoverage += snapDiff - snapDiffInt; // add the remainder\n    }\n    else {\n        // a fractional value, meaning the date is not visible\n        // always round up in this case. works for start AND end dates in a range.\n        snapCoverage = Math.ceil(snapCoverage);\n    }\n    return snapCoverage;\n}\nfunction coordToCss(hcoord, isRtl) {\n    if (hcoord === null) {\n        return { left: '', right: '' };\n    }\n    if (isRtl) {\n        return { right: hcoord, left: '' };\n    }\n    return { left: hcoord, right: '' };\n}\nfunction coordsToCss(hcoords, isRtl) {\n    if (!hcoords) {\n        return { left: '', right: '' };\n    }\n    if (isRtl) {\n        return { right: hcoords.start, left: -hcoords.end };\n    }\n    return { left: hcoords.start, right: -hcoords.end };\n}\n\nclass TimelineHeader extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n    }\n    render() {\n        let { props, context } = this;\n        // TODO: very repetitive\n        // TODO: make part of tDateProfile?\n        let timerUnit = greatestDurationDenominator(props.tDateProfile.slotDuration).unit;\n        // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n        let slatCoords = props.slatCoords && props.slatCoords.dateProfile === props.dateProfile ? props.slatCoords : null;\n        return (createElement(NowTimer, { unit: timerUnit }, (nowDate, todayRange) => (createElement(\"div\", { className: \"fc-timeline-header\", ref: this.rootElRef },\n            createElement(\"table\", { \"aria-hidden\": true, className: \"fc-scrollgrid-sync-table\", style: { minWidth: props.tableMinWidth, width: props.clientWidth } },\n                props.tableColGroupNode,\n                createElement(\"tbody\", null,\n                    createElement(TimelineHeaderRows, { dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: nowDate, todayRange: todayRange, rowInnerHeights: props.rowInnerHeights }))),\n            context.options.nowIndicator && (\n            // need to have a container regardless of whether the current view has a visible now indicator\n            // because apparently removal of the element resets the scroll for some reasons (issue #5351).\n            // this issue doesn't happen for the timeline body however (\n            createElement(\"div\", { className: \"fc-timeline-now-indicator-container\" }, (slatCoords && slatCoords.isDateInRange(nowDate)) && (createElement(NowIndicatorContainer, { elClasses: ['fc-timeline-now-indicator-arrow'], elStyle: coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl), isAxis: true, date: nowDate }))))))));\n    }\n    componentDidMount() {\n        this.updateSize();\n    }\n    componentDidUpdate() {\n        this.updateSize();\n    }\n    updateSize() {\n        if (this.props.onMaxCushionWidth) {\n            this.props.onMaxCushionWidth(this.computeMaxCushionWidth());\n        }\n    }\n    computeMaxCushionWidth() {\n        return Math.max(...findElements(this.rootElRef.current, '.fc-timeline-header-row:last-child .fc-timeline-slot-cushion').map((el) => el.getBoundingClientRect().width));\n    }\n}\n\nclass TimelineSlatCell extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { dateEnv, options, theme } = context;\n        let { date, tDateProfile, isEm } = props;\n        let dateMeta = getDateMeta(props.date, props.todayRange, props.nowDate, props.dateProfile);\n        let renderProps = Object.assign(Object.assign({ date: dateEnv.toDate(props.date) }, dateMeta), { view: context.viewApi });\n        return (createElement(ContentContainer, { elTag: \"td\", elRef: props.elRef, elClasses: [\n                'fc-timeline-slot',\n                'fc-timeline-slot-lane',\n                isEm && 'fc-timeline-slot-em',\n                tDateProfile.isTimeScale ? (isInt(dateEnv.countDurationsBetween(tDateProfile.normalizedRange.start, props.date, tDateProfile.labelInterval)) ?\n                    'fc-timeline-slot-major' :\n                    'fc-timeline-slot-minor') : '',\n                ...(props.isDay ?\n                    getDayClassNames(dateMeta, theme) :\n                    getSlotClassNames(dateMeta, theme)),\n            ], elAttrs: {\n                'data-date': dateEnv.formatIso(date, {\n                    omitTimeZoneOffset: true,\n                    omitTime: !tDateProfile.isTimeScale,\n                }),\n            }, renderProps: renderProps, generatorName: \"slotLaneContent\", customGenerator: options.slotLaneContent, classNameGenerator: options.slotLaneClassNames, didMount: options.slotLaneDidMount, willUnmount: options.slotLaneWillUnmount }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\" }))));\n    }\n}\n\nclass TimelineSlatsBody extends BaseComponent {\n    render() {\n        let { props } = this;\n        let { tDateProfile, cellElRefs } = props;\n        let { slotDates, isWeekStarts } = tDateProfile;\n        let isDay = !tDateProfile.isTimeScale && !tDateProfile.largeUnit;\n        return (createElement(\"tbody\", null,\n            createElement(\"tr\", null, slotDates.map((slotDate, i) => {\n                let key = slotDate.toISOString();\n                return (createElement(TimelineSlatCell, { key: key, elRef: cellElRefs.createRef(key), date: slotDate, dateProfile: props.dateProfile, tDateProfile: tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, isEm: isWeekStarts[i], isDay: isDay }));\n            }))));\n    }\n}\n\nclass TimelineSlats extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n        this.cellElRefs = new RefMap();\n        this.handleScrollRequest = (request) => {\n            let { onScrollLeftRequest } = this.props;\n            let { coords } = this;\n            if (onScrollLeftRequest && coords) {\n                if (request.time) {\n                    let scrollLeft = coords.coordFromLeft(coords.durationToCoord(request.time));\n                    onScrollLeftRequest(scrollLeft);\n                }\n                return true;\n            }\n            return null; // best?\n        };\n    }\n    render() {\n        let { props, context } = this;\n        return (createElement(\"div\", { className: \"fc-timeline-slots\", ref: this.rootElRef },\n            createElement(\"table\", { \"aria-hidden\": true, className: context.theme.getClass('table'), style: {\n                    minWidth: props.tableMinWidth,\n                    width: props.clientWidth,\n                } },\n                props.tableColGroupNode,\n                createElement(TimelineSlatsBody, { cellElRefs: this.cellElRefs, dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange }))));\n    }\n    componentDidMount() {\n        this.updateSizing();\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n    componentDidUpdate(prevProps) {\n        this.updateSizing();\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n    }\n    componentWillUnmount() {\n        this.scrollResponder.detach();\n        if (this.props.onCoords) {\n            this.props.onCoords(null);\n        }\n    }\n    updateSizing() {\n        let { props, context } = this;\n        if (props.clientWidth !== null && // is sizing stable?\n            this.scrollResponder\n        // ^it's possible to have clientWidth immediately after mount (when returning from print view), but w/o scrollResponder\n        ) {\n            let rootEl = this.rootElRef.current;\n            if (rootEl.offsetWidth) { // not hidden by css\n                this.coords = new TimelineCoords(this.rootElRef.current, collectCellEls(this.cellElRefs.currentMap, props.tDateProfile.slotDates), props.dateProfile, props.tDateProfile, context.dateEnv, context.isRtl);\n                if (props.onCoords) {\n                    props.onCoords(this.coords);\n                }\n                this.scrollResponder.update(false); // TODO: wouldn't have to do this if coords were in state\n            }\n        }\n    }\n    positionToHit(leftPosition) {\n        let { outerCoordCache } = this.coords;\n        let { dateEnv, isRtl } = this.context;\n        let { tDateProfile } = this.props;\n        let slatIndex = outerCoordCache.leftToIndex(leftPosition);\n        if (slatIndex != null) {\n            // somewhat similar to what TimeGrid does. consolidate?\n            let slatWidth = outerCoordCache.getWidth(slatIndex);\n            let partial = isRtl ?\n                (outerCoordCache.rights[slatIndex] - leftPosition) / slatWidth :\n                (leftPosition - outerCoordCache.lefts[slatIndex]) / slatWidth;\n            let localSnapIndex = Math.floor(partial * tDateProfile.snapsPerSlot);\n            let start = dateEnv.add(tDateProfile.slotDates[slatIndex], multiplyDuration(tDateProfile.snapDuration, localSnapIndex));\n            let end = dateEnv.add(start, tDateProfile.snapDuration);\n            return {\n                dateSpan: {\n                    range: { start, end },\n                    allDay: !this.props.tDateProfile.isTimeScale,\n                },\n                dayEl: this.cellElRefs.currentMap[slatIndex],\n                left: outerCoordCache.lefts[slatIndex],\n                right: outerCoordCache.rights[slatIndex],\n            };\n        }\n        return null;\n    }\n}\nfunction collectCellEls(elMap, slotDates) {\n    return slotDates.map((slotDate) => {\n        let key = slotDate.toISOString();\n        return elMap[key];\n    });\n}\n\nfunction computeSegHCoords(segs, minWidth, timelineCoords) {\n    let hcoords = [];\n    if (timelineCoords) {\n        for (let seg of segs) {\n            let res = timelineCoords.rangeToCoords(seg);\n            let start = Math.round(res.start); // for barely-overlapping collisions\n            let end = Math.round(res.end); //\n            if (end - start < minWidth) {\n                end = start + minWidth;\n            }\n            hcoords.push({ start, end });\n        }\n    }\n    return hcoords;\n}\nfunction computeFgSegPlacements(segs, segHCoords, // might not have for every seg\neventInstanceHeights, // might not have for every seg\nmoreLinkHeights, // might not have for every more-link\nstrictOrder, maxStackCnt) {\n    let segInputs = [];\n    let crudePlacements = []; // when we don't know dims\n    for (let i = 0; i < segs.length; i += 1) {\n        let seg = segs[i];\n        let instanceId = seg.eventRange.instance.instanceId;\n        let height = eventInstanceHeights[instanceId];\n        let hcoords = segHCoords[i];\n        if (height && hcoords) {\n            segInputs.push({\n                index: i,\n                span: hcoords,\n                thickness: height,\n            });\n        }\n        else {\n            crudePlacements.push({\n                seg,\n                hcoords,\n                top: null,\n            });\n        }\n    }\n    let hierarchy = new SegHierarchy();\n    if (strictOrder != null) {\n        hierarchy.strictOrder = strictOrder;\n    }\n    if (maxStackCnt != null) {\n        hierarchy.maxStackCnt = maxStackCnt;\n    }\n    let hiddenEntries = hierarchy.addSegs(segInputs);\n    let hiddenPlacements = hiddenEntries.map((entry) => ({\n        seg: segs[entry.index],\n        hcoords: entry.span,\n        top: null,\n    }));\n    let hiddenGroups = groupIntersectingEntries(hiddenEntries);\n    let moreLinkInputs = [];\n    let moreLinkCrudePlacements = [];\n    const extractSeg = (entry) => segs[entry.index];\n    for (let i = 0; i < hiddenGroups.length; i += 1) {\n        let hiddenGroup = hiddenGroups[i];\n        let sortedSegs = hiddenGroup.entries.map(extractSeg);\n        let height = moreLinkHeights[buildIsoString(computeEarliestSegStart(sortedSegs))]; // not optimal :(\n        if (height != null) {\n            // NOTE: the hiddenGroup's spanStart/spanEnd are already computed by rangeToCoords. computed during input.\n            moreLinkInputs.push({\n                index: segs.length + i,\n                thickness: height,\n                span: hiddenGroup.span,\n            });\n        }\n        else {\n            moreLinkCrudePlacements.push({\n                seg: sortedSegs,\n                hcoords: hiddenGroup.span,\n                top: null,\n            });\n        }\n    }\n    // add more-links into the hierarchy, but don't limit\n    hierarchy.maxStackCnt = -1;\n    hierarchy.addSegs(moreLinkInputs);\n    let visibleRects = hierarchy.toRects();\n    let visiblePlacements = [];\n    let maxHeight = 0;\n    for (let rect of visibleRects) {\n        let segIndex = rect.index;\n        visiblePlacements.push({\n            seg: segIndex < segs.length\n                ? segs[segIndex] // a real seg\n                : hiddenGroups[segIndex - segs.length].entries.map(extractSeg),\n            hcoords: rect.span,\n            top: rect.levelCoord,\n        });\n        maxHeight = Math.max(maxHeight, rect.levelCoord + rect.thickness);\n    }\n    return [\n        visiblePlacements.concat(crudePlacements, hiddenPlacements, moreLinkCrudePlacements),\n        maxHeight,\n    ];\n}\n\nclass TimelineLaneBg extends BaseComponent {\n    render() {\n        let { props } = this;\n        let highlightSeg = [].concat(props.eventResizeSegs, props.dateSelectionSegs);\n        return props.timelineCoords && (createElement(\"div\", { className: \"fc-timeline-bg\" },\n            this.renderSegs(props.businessHourSegs || [], props.timelineCoords, 'non-business'),\n            this.renderSegs(props.bgEventSegs || [], props.timelineCoords, 'bg-event'),\n            this.renderSegs(highlightSeg, props.timelineCoords, 'highlight')));\n    }\n    renderSegs(segs, timelineCoords, fillType) {\n        let { todayRange, nowDate } = this.props;\n        let { isRtl } = this.context;\n        let segHCoords = computeSegHCoords(segs, 0, timelineCoords);\n        let children = segs.map((seg, i) => {\n            let hcoords = segHCoords[i];\n            let hStyle = coordsToCss(hcoords, isRtl);\n            return (createElement(\"div\", { key: buildEventRangeKey(seg.eventRange), className: \"fc-timeline-bg-harness\", style: hStyle }, fillType === 'bg-event' ?\n                createElement(BgEvent, Object.assign({ seg: seg }, getSegMeta(seg, todayRange, nowDate))) :\n                renderFill(fillType)));\n        });\n        return createElement(Fragment, null, children);\n    }\n}\n\nclass TimelineLaneSlicer extends Slicer {\n    sliceRange(origRange, dateProfile, dateProfileGenerator, tDateProfile, dateEnv) {\n        let normalRange = normalizeRange(origRange, tDateProfile, dateEnv);\n        let segs = [];\n        // protect against when the span is entirely in an invalid date region\n        if (computeDateSnapCoverage(normalRange.start, tDateProfile, dateEnv)\n            < computeDateSnapCoverage(normalRange.end, tDateProfile, dateEnv)) {\n            // intersect the footprint's range with the grid's range\n            let slicedRange = intersectRanges(normalRange, tDateProfile.normalizedRange);\n            if (slicedRange) {\n                segs.push({\n                    start: slicedRange.start,\n                    end: slicedRange.end,\n                    isStart: slicedRange.start.valueOf() === normalRange.start.valueOf()\n                        && isValidDate(slicedRange.start, tDateProfile, dateProfile, dateProfileGenerator),\n                    isEnd: slicedRange.end.valueOf() === normalRange.end.valueOf()\n                        && isValidDate(addMs(slicedRange.end, -1), tDateProfile, dateProfile, dateProfileGenerator),\n                });\n            }\n        }\n        return segs;\n    }\n}\n\nconst DEFAULT_TIME_FORMAT = createFormatter({\n    hour: 'numeric',\n    minute: '2-digit',\n    omitZeroMinute: true,\n    meridiem: 'narrow',\n});\nclass TimelineEvent extends BaseComponent {\n    render() {\n        let { props } = this;\n        return (createElement(StandardEvent, Object.assign({}, props, { elClasses: ['fc-timeline-event', 'fc-h-event'], defaultTimeFormat: DEFAULT_TIME_FORMAT, defaultDisplayEventTime: !props.isTimeScale })));\n    }\n}\n\nclass TimelineLaneMoreLink extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { hiddenSegs, placement, resourceId } = props;\n        let { top, hcoords } = placement;\n        let isVisible = hcoords && top !== null;\n        let hStyle = coordsToCss(hcoords, context.isRtl);\n        let extraDateSpan = resourceId ? { resourceId } : {};\n        return (createElement(MoreLinkContainer, { elRef: props.elRef, elClasses: ['fc-timeline-more-link'], elStyle: Object.assign({ visibility: isVisible ? '' : 'hidden', top: top || 0 }, hStyle), allDayDate: null, moreCnt: hiddenSegs.length, allSegs: hiddenSegs, hiddenSegs: hiddenSegs, dateProfile: props.dateProfile, todayRange: props.todayRange, extraDateSpan: extraDateSpan, popoverContent: () => (createElement(Fragment, null, hiddenSegs.map((seg) => {\n                let instanceId = seg.eventRange.instance.instanceId;\n                return (createElement(\"div\", { key: instanceId, style: { visibility: props.isForcedInvisible[instanceId] ? 'hidden' : '' } },\n                    createElement(TimelineEvent, Object.assign({ isTimeScale: props.isTimeScale, seg: seg, isDragging: false, isResizing: false, isDateSelecting: false, isSelected: instanceId === props.eventSelection }, getSegMeta(seg, props.todayRange, props.nowDate)))));\n            }))) }, (InnerContent) => (createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timeline-more-link-inner', 'fc-sticky'] }))));\n    }\n}\n\nclass TimelineLane extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.slicer = new TimelineLaneSlicer();\n        this.sortEventSegs = memoize(sortEventSegs);\n        this.harnessElRefs = new RefMap();\n        this.moreElRefs = new RefMap();\n        this.innerElRef = createRef();\n        // TODO: memoize event positioning\n        this.state = {\n            eventInstanceHeights: {},\n            moreLinkHeights: {},\n        };\n        this.handleResize = (isForced) => {\n            if (isForced) {\n                this.updateSize();\n            }\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options } = context;\n        let { dateProfile, tDateProfile } = props;\n        let slicedProps = this.slicer.sliceProps(props, dateProfile, tDateProfile.isTimeScale ? null : props.nextDayThreshold, context, // wish we didn't have to pass in the rest of the args...\n        dateProfile, context.dateProfileGenerator, tDateProfile, context.dateEnv);\n        let mirrorSegs = (slicedProps.eventDrag ? slicedProps.eventDrag.segs : null) ||\n            (slicedProps.eventResize ? slicedProps.eventResize.segs : null) ||\n            [];\n        let fgSegs = this.sortEventSegs(slicedProps.fgEventSegs, options.eventOrder);\n        let fgSegHCoords = computeSegHCoords(fgSegs, options.eventMinWidth, props.timelineCoords);\n        let [fgPlacements, fgHeight] = computeFgSegPlacements(fgSegs, fgSegHCoords, state.eventInstanceHeights, state.moreLinkHeights, options.eventOrderStrict, options.eventMaxStack);\n        let isForcedInvisible = // TODO: more convenient\n         (slicedProps.eventDrag ? slicedProps.eventDrag.affectedInstances : null) ||\n            (slicedProps.eventResize ? slicedProps.eventResize.affectedInstances : null) ||\n            {};\n        return (createElement(Fragment, null,\n            createElement(TimelineLaneBg, { businessHourSegs: slicedProps.businessHourSegs, bgEventSegs: slicedProps.bgEventSegs, timelineCoords: props.timelineCoords, eventResizeSegs: slicedProps.eventResize ? slicedProps.eventResize.segs : [] /* bad new empty array? */, dateSelectionSegs: slicedProps.dateSelectionSegs, nowDate: props.nowDate, todayRange: props.todayRange }),\n            createElement(\"div\", { className: \"fc-timeline-events fc-scrollgrid-sync-inner\", ref: this.innerElRef, style: { height: fgHeight } },\n                this.renderFgSegs(fgPlacements, isForcedInvisible, false, false, false),\n                this.renderFgSegs(buildMirrorPlacements(mirrorSegs, props.timelineCoords, fgPlacements), {}, Boolean(slicedProps.eventDrag), Boolean(slicedProps.eventResize), false))));\n    }\n    componentDidMount() {\n        this.updateSize();\n        this.context.addResizeHandler(this.handleResize);\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.eventStore !== this.props.eventStore || // external thing changed?\n            prevProps.timelineCoords !== this.props.timelineCoords || // external thing changed?\n            prevState.moreLinkHeights !== this.state.moreLinkHeights // HACK. see addStateEquality\n        ) {\n            this.updateSize();\n        }\n    }\n    componentWillUnmount() {\n        this.context.removeResizeHandler(this.handleResize);\n    }\n    updateSize() {\n        let { props } = this;\n        let { timelineCoords } = props;\n        const innerEl = this.innerElRef.current;\n        if (props.onHeightChange) {\n            props.onHeightChange(innerEl, false);\n        }\n        if (timelineCoords) {\n            this.setState({\n                eventInstanceHeights: mapHash(this.harnessElRefs.currentMap, (harnessEl) => (Math.round(harnessEl.getBoundingClientRect().height))),\n                moreLinkHeights: mapHash(this.moreElRefs.currentMap, (moreEl) => (Math.round(moreEl.getBoundingClientRect().height))),\n            }, () => {\n                if (props.onHeightChange) {\n                    props.onHeightChange(innerEl, true);\n                }\n            });\n        }\n        // hack\n        if (props.syncParentMinHeight) {\n            innerEl.parentElement.style.minHeight = innerEl.style.height;\n        }\n    }\n    renderFgSegs(segPlacements, isForcedInvisible, isDragging, isResizing, isDateSelecting) {\n        let { harnessElRefs, moreElRefs, props, context } = this;\n        let isMirror = isDragging || isResizing || isDateSelecting;\n        return (createElement(Fragment, null, segPlacements.map((segPlacement) => {\n            let { seg, hcoords, top } = segPlacement;\n            if (Array.isArray(seg)) { // a more-link\n                let isoStr = buildIsoString(computeEarliestSegStart(seg));\n                return (createElement(TimelineLaneMoreLink, { key: 'm:' + isoStr /* \"m\" for \"more\" */, elRef: moreElRefs.createRef(isoStr), hiddenSegs: seg, placement: segPlacement, dateProfile: props.dateProfile, nowDate: props.nowDate, todayRange: props.todayRange, isTimeScale: props.tDateProfile.isTimeScale, eventSelection: props.eventSelection, resourceId: props.resourceId, isForcedInvisible: isForcedInvisible }));\n            }\n            let instanceId = seg.eventRange.instance.instanceId;\n            let isVisible = isMirror || Boolean(!isForcedInvisible[instanceId] && hcoords && top !== null);\n            let hStyle = coordsToCss(hcoords, context.isRtl);\n            return (createElement(\"div\", { key: 'e:' + instanceId /* \"e\" for \"event\" */, ref: isMirror ? null : harnessElRefs.createRef(instanceId), className: \"fc-timeline-event-harness\", style: Object.assign({ visibility: isVisible ? '' : 'hidden', top: top || 0 }, hStyle) },\n                createElement(TimelineEvent, Object.assign({ isTimeScale: props.tDateProfile.isTimeScale, seg: seg, isDragging: isDragging, isResizing: isResizing, isDateSelecting: isDateSelecting, isSelected: instanceId === props.eventSelection /* TODO: bad for mirror? */ }, getSegMeta(seg, props.todayRange, props.nowDate)))));\n        })));\n    }\n}\nTimelineLane.addStateEquality({\n    eventInstanceHeights: isPropsEqual,\n    moreLinkHeights: isPropsEqual,\n});\nfunction buildMirrorPlacements(mirrorSegs, timelineCoords, fgPlacements) {\n    if (!mirrorSegs.length || !timelineCoords) {\n        return [];\n    }\n    let topsByInstanceId = buildAbsoluteTopHash(fgPlacements); // TODO: cache this at first render?\n    return mirrorSegs.map((seg) => ({\n        seg,\n        hcoords: timelineCoords.rangeToCoords(seg),\n        top: topsByInstanceId[seg.eventRange.instance.instanceId],\n    }));\n}\nfunction buildAbsoluteTopHash(placements) {\n    let topsByInstanceId = {};\n    for (let placement of placements) {\n        let { seg } = placement;\n        if (!Array.isArray(seg)) { // doesn't represent a more-link\n            topsByInstanceId[seg.eventRange.instance.instanceId] = placement.top;\n        }\n    }\n    return topsByInstanceId;\n}\n\nclass TimelineGrid extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.slatsRef = createRef();\n        this.state = {\n            coords: null,\n        };\n        this.handeEl = (el) => {\n            if (el) {\n                this.context.registerInteractiveComponent(this, { el });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n        this.handleCoords = (coords) => {\n            this.setState({ coords });\n            if (this.props.onSlatCoords) {\n                this.props.onSlatCoords(coords);\n            }\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options } = context;\n        let { dateProfile, tDateProfile } = props;\n        let timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n        return (createElement(\"div\", { className: \"fc-timeline-body\", ref: this.handeEl, style: {\n                minWidth: props.tableMinWidth,\n                height: props.clientHeight,\n                width: props.clientWidth,\n            } },\n            createElement(NowTimer, { unit: timerUnit }, (nowDate, todayRange) => (createElement(Fragment, null,\n                createElement(TimelineSlats, { ref: this.slatsRef, dateProfile: dateProfile, tDateProfile: tDateProfile, nowDate: nowDate, todayRange: todayRange, clientWidth: props.clientWidth, tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, onCoords: this.handleCoords, onScrollLeftRequest: props.onScrollLeftRequest }),\n                createElement(TimelineLane, { dateProfile: dateProfile, tDateProfile: props.tDateProfile, nowDate: nowDate, todayRange: todayRange, nextDayThreshold: options.nextDayThreshold, businessHours: props.businessHours, eventStore: props.eventStore, eventUiBases: props.eventUiBases, dateSelection: props.dateSelection, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, timelineCoords: state.coords, syncParentMinHeight: true }),\n                (options.nowIndicator && state.coords && state.coords.isDateInRange(nowDate)) && (createElement(\"div\", { className: \"fc-timeline-now-indicator-container\" },\n                    createElement(NowIndicatorContainer, { elClasses: ['fc-timeline-now-indicator-line'], elStyle: coordToCss(state.coords.dateToCoord(nowDate), context.isRtl), isAxis: false, date: nowDate }))))))));\n    }\n    // Hit System\n    // ------------------------------------------------------------------------------------------\n    queryHit(positionLeft, positionTop, elWidth, elHeight) {\n        let slats = this.slatsRef.current;\n        let slatHit = slats.positionToHit(positionLeft);\n        if (slatHit) {\n            return {\n                dateProfile: this.props.dateProfile,\n                dateSpan: slatHit.dateSpan,\n                rect: {\n                    left: slatHit.left,\n                    right: slatHit.right,\n                    top: 0,\n                    bottom: elHeight,\n                },\n                dayEl: slatHit.dayEl,\n                layer: 0,\n            };\n        }\n        return null;\n    }\n}\n\nclass TimelineView extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.buildTimelineDateProfile = memoize(buildTimelineDateProfile);\n        this.scrollGridRef = createRef();\n        this.state = {\n            slatCoords: null,\n            slotCushionMaxWidth: null,\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n        };\n        this.handleScrollLeftRequest = (scrollLeft) => {\n            let scrollGrid = this.scrollGridRef.current;\n            scrollGrid.forceScrollLeft(0, scrollLeft);\n        };\n        this.handleMaxCushionWidth = (slotCushionMaxWidth) => {\n            this.setState({\n                slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth), // for less rerendering TODO: DRY\n            });\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options } = context;\n        let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options);\n        let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options);\n        let tDateProfile = this.buildTimelineDateProfile(props.dateProfile, context.dateEnv, options, context.dateProfileGenerator);\n        let { slotMinWidth } = options;\n        let slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile));\n        let sections = [\n            {\n                type: 'header',\n                key: 'header',\n                isSticky: stickyHeaderDates,\n                chunks: [{\n                        key: 'timeline',\n                        content: (contentArg) => (createElement(TimelineHeader, { dateProfile: props.dateProfile, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, tDateProfile: tDateProfile, slatCoords: state.slatCoords, onMaxCushionWidth: slotMinWidth ? null : this.handleMaxCushionWidth })),\n                    }],\n            },\n            {\n                type: 'body',\n                key: 'body',\n                liquid: true,\n                chunks: [{\n                        key: 'timeline',\n                        content: (contentArg) => (createElement(TimelineGrid, Object.assign({}, props, { clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, tDateProfile: tDateProfile, onSlatCoords: this.handleSlatCoords, onScrollLeftRequest: this.handleScrollLeftRequest }))),\n                    }],\n            },\n        ];\n        if (stickyFooterScrollbar) {\n            sections.push({\n                type: 'footer',\n                key: 'footer',\n                isSticky: true,\n                chunks: [{\n                        key: 'timeline',\n                        content: renderScrollShim,\n                    }],\n            });\n        }\n        return (createElement(ViewContainer, { elClasses: [\n                'fc-timeline',\n                options.eventOverlap === false ?\n                    'fc-timeline-overlap-disabled' :\n                    '',\n            ], viewSpec: context.viewSpec },\n            createElement(ScrollGrid, { ref: this.scrollGridRef, liquid: !props.isHeightAuto && !props.forPrint, forPrint: props.forPrint, collapsibleWidth: false, colGroups: [\n                    { cols: slatCols },\n                ], sections: sections })));\n    }\n    computeFallbackSlotMinWidth(tDateProfile) {\n        return Math.max(30, ((this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel));\n    }\n}\nfunction buildSlatCols(tDateProfile, slotMinWidth) {\n    return [{\n            span: tDateProfile.slotCnt,\n            minWidth: slotMinWidth || 1, // needs to be a non-zero number to trigger horizontal scrollbars!??????\n        }];\n}\n\nvar css_248z = \".fc .fc-timeline-body{min-height:100%;position:relative;z-index:1}.fc .fc-timeline-slots{bottom:0;position:absolute;top:0;z-index:1}.fc .fc-timeline-slots>table{height:100%}.fc .fc-timeline-slot-minor{border-style:dotted}.fc .fc-timeline-slot-frame{align-items:center;display:flex;justify-content:center}.fc .fc-timeline-header-row-chrono .fc-timeline-slot-frame{justify-content:flex-start}.fc .fc-timeline-header-row:last-child .fc-timeline-slot-frame{overflow:hidden}.fc .fc-timeline-slot-cushion{padding:4px 5px;white-space:nowrap}.fc-direction-ltr .fc-timeline-slot{border-right:0!important}.fc-direction-rtl .fc-timeline-slot{border-left:0!important}.fc .fc-timeline-now-indicator-container{bottom:0;left:0;position:absolute;right:0;top:0;width:0;z-index:4}.fc .fc-timeline-now-indicator-arrow,.fc .fc-timeline-now-indicator-line{border-color:var(--fc-now-indicator-color);border-style:solid;pointer-events:none;position:absolute;top:0}.fc .fc-timeline-now-indicator-arrow{border-left-color:transparent;border-right-color:transparent;border-width:6px 5px 0;margin:0 -6px}.fc .fc-timeline-now-indicator-line{border-width:0 0 0 1px;bottom:0;margin:0 -1px}.fc .fc-timeline-events{position:relative;width:0;z-index:3}.fc .fc-timeline-event-harness,.fc .fc-timeline-more-link{position:absolute;top:0}.fc-timeline-event{z-index:1}.fc-timeline-event.fc-event-mirror{z-index:2}.fc-timeline-event{align-items:center;border-radius:0;display:flex;font-size:var(--fc-small-font-size);margin-bottom:1px;padding:2px 1px;position:relative}.fc-timeline-event .fc-event-main{flex-grow:1;flex-shrink:1;min-width:0}.fc-timeline-event .fc-event-time{font-weight:700}.fc-timeline-event .fc-event-time,.fc-timeline-event .fc-event-title{padding:0 2px;white-space:nowrap}.fc-direction-ltr .fc-timeline-event.fc-event-end,.fc-direction-ltr .fc-timeline-more-link{margin-right:1px}.fc-direction-rtl .fc-timeline-event.fc-event-end,.fc-direction-rtl .fc-timeline-more-link{margin-left:1px}.fc-timeline-overlap-disabled .fc-timeline-event{margin-bottom:0;padding-bottom:5px;padding-top:5px}.fc-timeline-event:not(.fc-event-end):after,.fc-timeline-event:not(.fc-event-start):before{border-color:transparent #000;border-style:solid;border-width:5px;content:\\\"\\\";flex-grow:0;flex-shrink:0;height:0;margin:0 1px;opacity:.5;width:0}.fc-direction-ltr .fc-timeline-event:not(.fc-event-start):before,.fc-direction-rtl .fc-timeline-event:not(.fc-event-end):after{border-left:0}.fc-direction-ltr .fc-timeline-event:not(.fc-event-end):after,.fc-direction-rtl .fc-timeline-event:not(.fc-event-start):before{border-right:0}.fc-timeline-more-link{background:var(--fc-more-link-bg-color);color:var(--fc-more-link-text-color);cursor:pointer;font-size:var(--fc-small-font-size);padding:1px}.fc-timeline-more-link-inner{display:inline-block;left:0;padding:2px;right:0}.fc .fc-timeline-bg{bottom:0;left:0;position:absolute;right:0;top:0;width:0;z-index:2}.fc .fc-timeline-bg .fc-non-business{z-index:1}.fc .fc-timeline-bg .fc-bg-event{z-index:2}.fc .fc-timeline-bg .fc-highlight{z-index:3}.fc .fc-timeline-bg-harness{bottom:0;position:absolute;top:0}\";\ninjectStyles(css_248z);\n\nexport { TimelineCoords, TimelineHeader, TimelineHeaderRows, TimelineLane, TimelineLaneBg, TimelineLaneSlicer, TimelineSlats, TimelineView, buildSlatCols, buildTimelineDateProfile, coordToCss, coordsToCss };\n", "import { createPlugin } from '@fullcalendar/core/index.js';\nimport premiumCommonPlugin from '@fullcalendar/premium-common/index.js';\nimport { TimelineView } from './internal.js';\nimport '@fullcalendar/core/internal.js';\nimport '@fullcalendar/core/preact.js';\nimport '@fullcalendar/scrollgrid/internal.js';\n\nvar index = createPlugin({\n    name: '@fullcalendar/timeline',\n    premiumReleaseDate: '2024-07-12',\n    deps: [premiumCommonPlugin],\n    initialView: 'timelineDay',\n    views: {\n        timeline: {\n            component: TimelineView,\n            usesMinMaxTime: true,\n            eventResizableFromStart: true, // how is this consumed for TimelineView tho?\n        },\n        timelineDay: {\n            type: 'timeline',\n            duration: { days: 1 },\n        },\n        timelineWeek: {\n            type: 'timeline',\n            duration: { weeks: 1 },\n        },\n        timelineMonth: {\n            type: 'timeline',\n            duration: { months: 1 },\n        },\n        timelineYear: {\n            type: 'timeline',\n            duration: { years: 1 },\n        },\n    },\n});\n\nexport { index as default };\n", "import { BaseComponent, memoizeObjArg, ContentContainer, isArraysEqual, RefMap, findElements, elementClosest, PositionCache, DateComponent, memoize, greatestDurationDenominator, NowTimer, NowIndicatorContainer, config, getStickyHeaderDates, getStickyFooterScrollbar, renderScrollShim, ViewContainer, injectStyles } from '@fullcalendar/core/internal.js';\nimport { createElement, Fragment, createRef } from '@fullcalendar/core/preact.js';\nimport { TimelineLane, TimelineLaneSlicer, TimelineSlats, TimelineLaneBg, coordToCss, buildTimelineDateProfile, buildSlatCols, TimelineHeader } from '@fullcalendar/timeline/internal.js';\nimport { buildResourceFields, getPublicId, isGroupsEqual, refineRenderProps as refineRenderProps$1, ResourceSplitter, buildRowNodes, DEFAULT_RESOURCE_ORDER } from '@fullcalendar/resource/internal.js';\nimport { ResourceApi } from '@fullcalendar/resource/index.js';\nimport { ScrollGrid } from '@fullcalendar/scrollgrid/internal.js';\n\n/*\nRenders the DOM responsible for the subrow expander area,\nas well as the space before it (used to align expanders of similar depths)\n*/\nfunction ExpanderIcon({ depth, hasChildren, isExpanded, onExpanderClick }) {\n    let nodes = [];\n    for (let i = 0; i < depth; i += 1) {\n        nodes.push(createElement(\"span\", { className: \"fc-icon\" }));\n    }\n    let iconClassNames = ['fc-icon'];\n    if (hasChildren) {\n        if (isExpanded) {\n            iconClassNames.push('fc-icon-minus-square');\n        }\n        else {\n            iconClassNames.push('fc-icon-plus-square');\n        }\n    }\n    nodes.push(createElement(\"span\", { className: 'fc-datagrid-expander' + (hasChildren ? '' : ' fc-datagrid-expander-placeholder'), onClick: onExpanderClick },\n        createElement(\"span\", { className: iconClassNames.join(' ') })));\n    return createElement(Fragment, {}, ...nodes);\n}\n\n// worth making a PureComponent? (because of innerHeight)\nclass SpreadsheetIndividualCell extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.refineRenderProps = memoizeObjArg(refineRenderProps);\n        this.onExpanderClick = (ev) => {\n            let { props } = this;\n            if (props.hasChildren) {\n                this.context.dispatch({\n                    type: 'SET_RESOURCE_ENTITY_EXPANDED',\n                    id: props.resource.id,\n                    isExpanded: !props.isExpanded,\n                });\n            }\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { colSpec } = props;\n        let renderProps = this.refineRenderProps({\n            resource: props.resource,\n            fieldValue: props.fieldValue,\n            context,\n        });\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                'fc-datagrid-cell',\n                'fc-resource',\n            ], elAttrs: {\n                role: 'gridcell',\n                'data-resource-id': props.resource.id,\n            }, renderProps: renderProps, generatorName: colSpec.isMain ? 'resourceLabelContent' : undefined, customGenerator: colSpec.cellContent, defaultGenerator: renderResourceInner, classNameGenerator: colSpec.cellClassNames, didMount: colSpec.cellDidMount, willUnmount: colSpec.cellWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: props.innerHeight } },\n            createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" },\n                colSpec.isMain && (createElement(ExpanderIcon, { depth: props.depth, hasChildren: props.hasChildren, isExpanded: props.isExpanded, onExpanderClick: this.onExpanderClick })),\n                createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] }))))));\n    }\n}\nfunction renderResourceInner(renderProps) {\n    return renderProps.fieldValue || createElement(Fragment, null, \"\\u00A0\");\n}\nfunction refineRenderProps(input) {\n    return {\n        resource: new ResourceApi(input.context, input.resource),\n        fieldValue: input.fieldValue,\n        view: input.context.viewApi,\n    };\n}\n\n// for VERTICAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupCell extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { colSpec } = props;\n        let renderProps = {\n            groupValue: props.fieldValue,\n            view: context.viewApi,\n        };\n        // a grouped cell. no data that is specific to this specific resource\n        // `colSpec` is for the group. a GroupSpec :(\n        return (createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                'fc-datagrid-cell',\n                'fc-resource-group',\n            ], elAttrs: {\n                role: 'gridcell',\n                rowSpan: props.rowSpan,\n            }, renderProps: renderProps, generatorName: \"resourceGroupLabelContent\", customGenerator: colSpec.cellContent, defaultGenerator: renderGroupInner, classNameGenerator: colSpec.cellClassNames, didMount: colSpec.cellDidMount, willUnmount: colSpec.cellWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame fc-datagrid-cell-frame-liquid\" },\n            createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-datagrid-cell-cushion', 'fc-sticky'] })))));\n    }\n}\nfunction renderGroupInner(renderProps) {\n    return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nclass SpreadsheetRow extends BaseComponent {\n    render() {\n        let { props } = this;\n        let { resource, rowSpans, depth } = props;\n        let resourceFields = buildResourceFields(resource); // slightly inefficient. already done up the call stack\n        return (createElement(\"tr\", { role: \"row\" }, props.colSpecs.map((colSpec, i) => {\n            let rowSpan = rowSpans[i];\n            if (rowSpan === 0) { // not responsible for group-based rows. VRowGroup is\n                return null;\n            }\n            if (rowSpan == null) {\n                rowSpan = 1;\n            }\n            let fieldValue = colSpec.field ? resourceFields[colSpec.field] :\n                (resource.title || getPublicId(resource.id));\n            if (rowSpan > 1) {\n                return (createElement(SpreadsheetGroupCell, { key: i, colSpec: colSpec, fieldValue: fieldValue, rowSpan: rowSpan }));\n            }\n            return (createElement(SpreadsheetIndividualCell, { key: i, colSpec: colSpec, resource: resource, fieldValue: fieldValue, depth: depth, hasChildren: props.hasChildren, isExpanded: props.isExpanded, innerHeight: props.innerHeight }));\n        })));\n    }\n}\nSpreadsheetRow.addPropsEquality({\n    rowSpans: isArraysEqual,\n});\n\n// for HORIZONTAL cell grouping, in spreadsheet area\nclass SpreadsheetGroupRow extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.innerInnerRef = createRef();\n        this.onExpanderClick = () => {\n            let { props } = this;\n            this.context.dispatch({\n                type: 'SET_RESOURCE_ENTITY_EXPANDED',\n                id: props.id,\n                isExpanded: !props.isExpanded,\n            });\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let renderProps = { groupValue: props.group.value, view: context.viewApi };\n        let spec = props.group.spec;\n        return (createElement(\"tr\", { role: \"row\" },\n            createElement(ContentContainer, { elTag: \"th\", elClasses: [\n                    'fc-datagrid-cell',\n                    'fc-resource-group',\n                    context.theme.getClass('tableCellShaded'),\n                ], elAttrs: {\n                    // ARIA TODO: not really a columnheader\n                    // extremely tedious to make this aria-compliant,\n                    // to assign multiple headers to each cell\n                    // https://www.w3.org/WAI/tutorials/tables/multi-level/\n                    role: 'columnheader',\n                    scope: 'colgroup',\n                    colSpan: props.spreadsheetColCnt,\n                }, renderProps: renderProps, generatorName: \"resourceGroupLabelContent\", customGenerator: spec.labelContent, defaultGenerator: renderCellInner, classNameGenerator: spec.labelClassNames, didMount: spec.labelDidMount, willUnmount: spec.labelWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: props.innerHeight } },\n                createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\", ref: this.innerInnerRef },\n                    createElement(ExpanderIcon, { depth: 0, hasChildren: true, isExpanded: props.isExpanded, onExpanderClick: this.onExpanderClick }),\n                    createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] })))))));\n    }\n}\nSpreadsheetGroupRow.addPropsEquality({\n    group: isGroupsEqual,\n});\nfunction renderCellInner(renderProps) {\n    return renderProps.groupValue || createElement(Fragment, null, \"\\u00A0\");\n}\n\nconst SPREADSHEET_COL_MIN_WIDTH = 20;\nclass SpreadsheetHeader extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.resizerElRefs = new RefMap(this._handleColResizerEl.bind(this));\n        this.colDraggings = {};\n    }\n    render() {\n        let { colSpecs, superHeaderRendering, rowInnerHeights } = this.props;\n        let renderProps = { view: this.context.viewApi };\n        let rowNodes = [];\n        rowInnerHeights = rowInnerHeights.slice(); // copy, because we're gonna pop\n        if (superHeaderRendering) {\n            let rowInnerHeight = rowInnerHeights.shift();\n            rowNodes.push(createElement(\"tr\", { key: \"row-super\", role: \"row\" },\n                createElement(ContentContainer, { elTag: \"th\", elClasses: [\n                        'fc-datagrid-cell',\n                        'fc-datagrid-cell-super',\n                    ], elAttrs: {\n                        role: 'columnheader',\n                        scope: 'colgroup',\n                        colSpan: colSpecs.length,\n                    }, renderProps: renderProps, generatorName: \"resourceAreaHeaderContent\", customGenerator: superHeaderRendering.headerContent, defaultGenerator: superHeaderRendering.headerDefault, classNameGenerator: superHeaderRendering.headerClassNames, didMount: superHeaderRendering.headerDidMount, willUnmount: superHeaderRendering.headerWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: rowInnerHeight } },\n                    createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-datagrid-cell-cushion', 'fc-scrollgrid-sync-inner'] }))))));\n        }\n        let rowInnerHeight = rowInnerHeights.shift();\n        rowNodes.push(createElement(\"tr\", { key: \"row\", role: \"row\" }, colSpecs.map((colSpec, i) => {\n            let isLastCol = i === (colSpecs.length - 1);\n            // need empty inner div for abs positioning for resizer\n            return (createElement(ContentContainer, { key: i, elTag: \"th\", elClasses: ['fc-datagrid-cell'], elAttrs: { role: 'columnheader' }, renderProps: renderProps, generatorName: \"resourceAreaHeaderContent\", customGenerator: colSpec.headerContent, defaultGenerator: colSpec.headerDefault, classNameGenerator: colSpec.headerClassNames, didMount: colSpec.headerDidMount, willUnmount: colSpec.headerWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-datagrid-cell-frame\", style: { height: rowInnerHeight } },\n                createElement(\"div\", { className: \"fc-datagrid-cell-cushion fc-scrollgrid-sync-inner\" },\n                    colSpec.isMain && (createElement(\"span\", { className: \"fc-datagrid-expander fc-datagrid-expander-placeholder\" },\n                        createElement(\"span\", { className: \"fc-icon\" }))),\n                    createElement(InnerContent, { elTag: \"span\", elClasses: ['fc-datagrid-cell-main'] })),\n                !isLastCol && (createElement(\"div\", { className: \"fc-datagrid-cell-resizer\", ref: this.resizerElRefs.createRef(i) }))))));\n        })));\n        return (createElement(Fragment, null, rowNodes));\n    }\n    _handleColResizerEl(resizerEl, index) {\n        let { colDraggings } = this;\n        if (!resizerEl) {\n            let dragging = colDraggings[index];\n            if (dragging) {\n                dragging.destroy();\n                delete colDraggings[index];\n            }\n        }\n        else {\n            let dragging = this.initColResizing(resizerEl, parseInt(index, 10));\n            if (dragging) {\n                colDraggings[index] = dragging;\n            }\n        }\n    }\n    initColResizing(resizerEl, index) {\n        let { pluginHooks, isRtl } = this.context;\n        let { onColWidthChange } = this.props;\n        let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n        if (ElementDraggingImpl) {\n            let dragging = new ElementDraggingImpl(resizerEl);\n            let startWidth; // of just the single column\n            let currentWidths; // of all columns\n            dragging.emitter.on('dragstart', () => {\n                let allCells = findElements(elementClosest(resizerEl, 'tr'), 'th');\n                currentWidths = allCells.map((cellEl) => (cellEl.getBoundingClientRect().width));\n                startWidth = currentWidths[index];\n            });\n            dragging.emitter.on('dragmove', (pev) => {\n                currentWidths[index] = Math.max(startWidth + pev.deltaX * (isRtl ? -1 : 1), SPREADSHEET_COL_MIN_WIDTH);\n                if (onColWidthChange) {\n                    onColWidthChange(currentWidths.slice()); // send a copy since currentWidths continues to be mutated\n                }\n            });\n            dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n            return dragging;\n        }\n        return null;\n    }\n}\n\nclass ResourceTimelineLane extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.refineRenderProps = memoizeObjArg(refineRenderProps$1);\n        this.handleHeightChange = (innerEl, isStable) => {\n            if (this.props.onHeightChange) {\n                this.props.onHeightChange(\n                // would want to use own <tr> ref, but not guaranteed to be ready when this fires\n                elementClosest(innerEl, 'tr'), isStable);\n            }\n        };\n    }\n    render() {\n        let { props, context } = this;\n        let { options } = context;\n        let renderProps = this.refineRenderProps({ resource: props.resource, context });\n        return (createElement(\"tr\", { ref: props.elRef },\n            createElement(ContentContainer, { elTag: \"td\", elClasses: [\n                    'fc-timeline-lane',\n                    'fc-resource',\n                ], elAttrs: {\n                    'data-resource-id': props.resource.id,\n                }, renderProps: renderProps, generatorName: \"resourceLaneContent\", customGenerator: options.resourceLaneContent, classNameGenerator: options.resourceLaneClassNames, didMount: options.resourceLaneDidMount, willUnmount: options.resourceLaneWillUnmount }, (InnerContent) => (createElement(\"div\", { className: \"fc-timeline-lane-frame\", style: { height: props.innerHeight } },\n                createElement(InnerContent, { elTag: \"div\", elClasses: ['fc-timeline-lane-misc'] }),\n                createElement(TimelineLane, { dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, nextDayThreshold: props.nextDayThreshold, businessHours: props.businessHours, eventStore: props.eventStore, eventUiBases: props.eventUiBases, dateSelection: props.dateSelection, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, timelineCoords: props.timelineCoords, onHeightChange: this.handleHeightChange, resourceId: props.resource.id })))))); // important NOT to do liquid-height. dont want to shrink height smaller than content\n    }\n}\n\n/*\nparallels the SpreadsheetGroupRow\n*/\nclass DividerRow extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { renderHooks } = props;\n        let renderProps = {\n            groupValue: props.groupValue,\n            view: context.viewApi,\n        };\n        return (createElement(\"tr\", { ref: props.elRef },\n            createElement(ContentContainer, { elTag: \"td\", elRef: props.elRef, elClasses: [\n                    'fc-timeline-lane',\n                    'fc-resource-group',\n                    context.theme.getClass('tableCellShaded'),\n                ], renderProps: renderProps, generatorName: \"resourceGroupLaneContent\", customGenerator: renderHooks.laneContent, classNameGenerator: renderHooks.laneClassNames, didMount: renderHooks.laneDidMount, willUnmount: renderHooks.laneWillUnmount }, (InnerContainer) => (createElement(InnerContainer, { elTag: \"div\", elStyle: { height: props.innerHeight } })))));\n    }\n}\n\nclass ResourceTimelineLanesBody extends BaseComponent {\n    render() {\n        let { props, context } = this;\n        let { rowElRefs, innerHeights } = props;\n        return (createElement(\"tbody\", null, props.rowNodes.map((node, index) => {\n            if (node.group) {\n                return (createElement(DividerRow, { key: node.id, elRef: rowElRefs.createRef(node.id), groupValue: node.group.value, renderHooks: node.group.spec, innerHeight: innerHeights[index] || '' }));\n            }\n            if (node.resource) {\n                let resource = node.resource;\n                return (createElement(ResourceTimelineLane, Object.assign({ key: node.id, elRef: rowElRefs.createRef(node.id) }, props.splitProps[resource.id], { resource: resource, dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, nextDayThreshold: context.options.nextDayThreshold, businessHours: resource.businessHours || props.fallbackBusinessHours, innerHeight: innerHeights[index] || '', timelineCoords: props.slatCoords, onHeightChange: props.onRowHeightChange })));\n            }\n            return null;\n        })));\n    }\n}\n\nclass ResourceTimelineLanes extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.rootElRef = createRef();\n        this.rowElRefs = new RefMap();\n    }\n    render() {\n        let { props, context } = this;\n        return (createElement(\"table\", { ref: this.rootElRef, \"aria-hidden\": true, className: 'fc-scrollgrid-sync-table ' + context.theme.getClass('table'), style: {\n                minWidth: props.tableMinWidth,\n                width: props.clientWidth,\n                height: props.minHeight,\n            } },\n            createElement(ResourceTimelineLanesBody, { rowElRefs: this.rowElRefs, rowNodes: props.rowNodes, dateProfile: props.dateProfile, tDateProfile: props.tDateProfile, nowDate: props.nowDate, todayRange: props.todayRange, splitProps: props.splitProps, fallbackBusinessHours: props.fallbackBusinessHours, slatCoords: props.slatCoords, innerHeights: props.innerHeights, onRowHeightChange: props.onRowHeightChange })));\n    }\n    componentDidMount() {\n        this.updateCoords();\n    }\n    componentDidUpdate() {\n        this.updateCoords();\n    }\n    componentWillUnmount() {\n        if (this.props.onRowCoords) {\n            this.props.onRowCoords(null);\n        }\n    }\n    updateCoords() {\n        let { props } = this;\n        if (props.onRowCoords && props.clientWidth !== null) { // a populated clientWidth means sizing has stabilized\n            this.props.onRowCoords(new PositionCache(this.rootElRef.current, collectRowEls(this.rowElRefs.currentMap, props.rowNodes), false, true));\n        }\n    }\n}\nfunction collectRowEls(elMap, rowNodes) {\n    return rowNodes.map((rowNode) => elMap[rowNode.id]);\n}\n\nclass ResourceTimelineGrid extends DateComponent {\n    constructor() {\n        super(...arguments);\n        this.computeHasResourceBusinessHours = memoize(computeHasResourceBusinessHours);\n        this.resourceSplitter = new ResourceSplitter(); // doesn't let it do businessHours tho\n        this.bgSlicer = new TimelineLaneSlicer();\n        this.slatsRef = createRef(); // needed for Hit creation :(\n        this.state = {\n            slatCoords: null,\n        };\n        this.handleEl = (el) => {\n            if (el) {\n                this.context.registerInteractiveComponent(this, { el });\n            }\n            else {\n                this.context.unregisterInteractiveComponent(this);\n            }\n        };\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n            if (this.props.onSlatCoords) {\n                this.props.onSlatCoords(slatCoords);\n            }\n        };\n        this.handleRowCoords = (rowCoords) => {\n            this.rowCoords = rowCoords;\n            if (this.props.onRowCoords) {\n                this.props.onRowCoords(rowCoords);\n            }\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { dateProfile, tDateProfile } = props;\n        let timerUnit = greatestDurationDenominator(tDateProfile.slotDuration).unit;\n        let hasResourceBusinessHours = this.computeHasResourceBusinessHours(props.rowNodes);\n        let splitProps = this.resourceSplitter.splitProps(props);\n        let bgLaneProps = splitProps[''];\n        let bgSlicedProps = this.bgSlicer.sliceProps(bgLaneProps, dateProfile, tDateProfile.isTimeScale ? null : props.nextDayThreshold, context, // wish we didn't need to pass in the rest of these args...\n        dateProfile, context.dateProfileGenerator, tDateProfile, context.dateEnv);\n        // WORKAROUND: make ignore slatCoords when out of sync with dateProfile\n        let slatCoords = state.slatCoords && state.slatCoords.dateProfile === props.dateProfile ? state.slatCoords : null;\n        return (createElement(\"div\", { ref: this.handleEl, className: [\n                'fc-timeline-body',\n                props.expandRows ? 'fc-timeline-body-expandrows' : '',\n            ].join(' '), style: { minWidth: props.tableMinWidth } },\n            createElement(NowTimer, { unit: timerUnit }, (nowDate, todayRange) => (createElement(Fragment, null,\n                createElement(TimelineSlats, { ref: this.slatsRef, dateProfile: dateProfile, tDateProfile: tDateProfile, nowDate: nowDate, todayRange: todayRange, clientWidth: props.clientWidth, tableColGroupNode: props.tableColGroupNode, tableMinWidth: props.tableMinWidth, onCoords: this.handleSlatCoords, onScrollLeftRequest: props.onScrollLeftRequest }),\n                createElement(TimelineLaneBg, { businessHourSegs: hasResourceBusinessHours ? null : bgSlicedProps.businessHourSegs, bgEventSegs: bgSlicedProps.bgEventSegs, timelineCoords: slatCoords, \n                    // empty array will result in unnecessary rerenders?\n                    eventResizeSegs: (bgSlicedProps.eventResize ? bgSlicedProps.eventResize.segs : []), dateSelectionSegs: bgSlicedProps.dateSelectionSegs, nowDate: nowDate, todayRange: todayRange }),\n                createElement(ResourceTimelineLanes, { rowNodes: props.rowNodes, dateProfile: dateProfile, tDateProfile: props.tDateProfile, nowDate: nowDate, todayRange: todayRange, splitProps: splitProps, fallbackBusinessHours: hasResourceBusinessHours ? props.businessHours : null, clientWidth: props.clientWidth, minHeight: props.expandRows ? props.clientHeight : '', tableMinWidth: props.tableMinWidth, innerHeights: props.rowInnerHeights, slatCoords: slatCoords, onRowCoords: this.handleRowCoords, onRowHeightChange: props.onRowHeightChange }),\n                (context.options.nowIndicator && slatCoords && slatCoords.isDateInRange(nowDate)) && (createElement(\"div\", { className: \"fc-timeline-now-indicator-container\" },\n                    createElement(NowIndicatorContainer, { elClasses: ['fc-timeline-now-indicator-line'], elStyle: coordToCss(slatCoords.dateToCoord(nowDate), context.isRtl), isAxis: false, date: nowDate }))))))));\n    }\n    // Hit System\n    // ------------------------------------------------------------------------------------------\n    queryHit(positionLeft, positionTop) {\n        let rowCoords = this.rowCoords;\n        let rowIndex = rowCoords.topToIndex(positionTop);\n        if (rowIndex != null) {\n            let resource = this.props.rowNodes[rowIndex].resource;\n            if (resource) { // not a group\n                let slatHit = this.slatsRef.current.positionToHit(positionLeft);\n                if (slatHit) {\n                    return {\n                        dateProfile: this.props.dateProfile,\n                        dateSpan: {\n                            range: slatHit.dateSpan.range,\n                            allDay: slatHit.dateSpan.allDay,\n                            resourceId: resource.id,\n                        },\n                        rect: {\n                            left: slatHit.left,\n                            right: slatHit.right,\n                            top: rowCoords.tops[rowIndex],\n                            bottom: rowCoords.bottoms[rowIndex],\n                        },\n                        dayEl: slatHit.dayEl,\n                        layer: 0,\n                    };\n                }\n            }\n        }\n        return null;\n    }\n}\nfunction computeHasResourceBusinessHours(rowNodes) {\n    for (let node of rowNodes) {\n        let resource = node.resource;\n        if (resource && resource.businessHours) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst MIN_RESOURCE_AREA_WIDTH = 30; // definitely bigger than scrollbars\n// RENAME?\nclass ResourceTimelineViewLayout extends BaseComponent {\n    constructor() {\n        super(...arguments);\n        this.scrollGridRef = createRef();\n        this.timeBodyScrollerElRef = createRef();\n        this.spreadsheetHeaderChunkElRef = createRef();\n        this.rootElRef = createRef();\n        this.ensureScrollGridResizeId = 0;\n        this.state = {\n            resourceAreaWidthOverride: null,\n        };\n        /*\n        ghetto debounce. don't race with ScrollGrid's resizing delay. solves #6140\n        */\n        this.ensureScrollGridResize = () => {\n            if (this.ensureScrollGridResizeId) {\n                clearTimeout(this.ensureScrollGridResizeId);\n            }\n            this.ensureScrollGridResizeId = setTimeout(() => {\n                this.scrollGridRef.current.handleSizing(false);\n            }, config.SCROLLGRID_RESIZE_INTERVAL + 1);\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options } = context;\n        let stickyHeaderDates = !props.forPrint && getStickyHeaderDates(options);\n        let stickyFooterScrollbar = !props.forPrint && getStickyFooterScrollbar(options);\n        let sections = [\n            {\n                type: 'header',\n                key: 'header',\n                syncRowHeights: true,\n                isSticky: stickyHeaderDates,\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        elRef: this.spreadsheetHeaderChunkElRef,\n                        // TODO: allow the content to specify this. have general-purpose 'content' with obj with keys\n                        tableClassName: 'fc-datagrid-header',\n                        rowContent: props.spreadsheetHeaderRows,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        content: props.timeHeaderContent,\n                    },\n                ],\n            },\n            {\n                type: 'body',\n                key: 'body',\n                syncRowHeights: true,\n                liquid: true,\n                expandRows: Boolean(options.expandRows),\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        tableClassName: 'fc-datagrid-body',\n                        rowContent: props.spreadsheetBodyRows,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        scrollerElRef: this.timeBodyScrollerElRef,\n                        content: props.timeBodyContent,\n                    },\n                ],\n            },\n        ];\n        if (stickyFooterScrollbar) {\n            sections.push({\n                type: 'footer',\n                key: 'footer',\n                isSticky: true,\n                chunks: [\n                    {\n                        key: 'datagrid',\n                        content: renderScrollShim,\n                    },\n                    {\n                        key: 'divider',\n                        outerContent: (createElement(\"td\", { role: \"presentation\", className: 'fc-resource-timeline-divider ' + context.theme.getClass('tableCellShaded') })),\n                    },\n                    {\n                        key: 'timeline',\n                        content: renderScrollShim,\n                    },\n                ],\n            });\n        }\n        let resourceAreaWidth = state.resourceAreaWidthOverride != null\n            ? state.resourceAreaWidthOverride\n            : options.resourceAreaWidth;\n        return (createElement(ScrollGrid, { ref: this.scrollGridRef, elRef: this.rootElRef, liquid: !props.isHeightAuto && !props.forPrint, forPrint: props.forPrint, collapsibleWidth: false, colGroups: [\n                { cols: props.spreadsheetCols, width: resourceAreaWidth },\n                { cols: [] },\n                { cols: props.timeCols },\n            ], sections: sections }));\n    }\n    forceTimeScroll(left) {\n        let scrollGrid = this.scrollGridRef.current;\n        scrollGrid.forceScrollLeft(2, left); // 2 = the time area\n    }\n    forceResourceScroll(top) {\n        let scrollGrid = this.scrollGridRef.current;\n        scrollGrid.forceScrollTop(1, top); // 1 = the body\n    }\n    getResourceScroll() {\n        let timeBodyScrollerEl = this.timeBodyScrollerElRef.current;\n        return timeBodyScrollerEl.scrollTop;\n    }\n    // Resource Area Resizing\n    // ------------------------------------------------------------------------------------------\n    // NOTE: a callback Ref for the resizer was firing multiple times with same elements (Preact)\n    // that's why we use spreadsheetResizerElRef instead\n    componentDidMount() {\n        this.initSpreadsheetResizing();\n    }\n    componentWillUnmount() {\n        this.destroySpreadsheetResizing();\n    }\n    initSpreadsheetResizing() {\n        let { isRtl, pluginHooks } = this.context;\n        let ElementDraggingImpl = pluginHooks.elementDraggingImpl;\n        let spreadsheetHeadEl = this.spreadsheetHeaderChunkElRef.current;\n        if (ElementDraggingImpl) {\n            let rootEl = this.rootElRef.current;\n            let dragging = this.spreadsheetResizerDragging = new ElementDraggingImpl(rootEl, '.fc-resource-timeline-divider');\n            let dragStartWidth;\n            let viewWidth;\n            dragging.emitter.on('dragstart', () => {\n                dragStartWidth = spreadsheetHeadEl.getBoundingClientRect().width;\n                viewWidth = rootEl.getBoundingClientRect().width;\n            });\n            dragging.emitter.on('dragmove', (pev) => {\n                let newWidth = dragStartWidth + pev.deltaX * (isRtl ? -1 : 1);\n                newWidth = Math.max(newWidth, MIN_RESOURCE_AREA_WIDTH);\n                newWidth = Math.min(newWidth, viewWidth - MIN_RESOURCE_AREA_WIDTH);\n                // scrollgrid will ignore resize requests if there are too many :|\n                this.setState({\n                    resourceAreaWidthOverride: newWidth,\n                }, this.ensureScrollGridResize);\n            });\n            dragging.setAutoScrollEnabled(false); // because gets weird with auto-scrolling time area\n        }\n    }\n    destroySpreadsheetResizing() {\n        if (this.spreadsheetResizerDragging) {\n            this.spreadsheetResizerDragging.destroy();\n        }\n    }\n}\n\nclass ResourceTimelineView extends BaseComponent {\n    constructor(props, context) {\n        super(props, context);\n        this.processColOptions = memoize(processColOptions);\n        this.buildTimelineDateProfile = memoize(buildTimelineDateProfile);\n        this.hasNesting = memoize(hasNesting);\n        this.buildRowNodes = memoize(buildRowNodes);\n        this.layoutRef = createRef();\n        this.rowNodes = [];\n        this.renderedRowNodes = [];\n        this.buildRowIndex = memoize(buildRowIndex);\n        this.handleSlatCoords = (slatCoords) => {\n            this.setState({ slatCoords });\n        };\n        this.handleRowCoords = (rowCoords) => {\n            this.rowCoords = rowCoords;\n            this.scrollResponder.update(false); // TODO: could eliminate this if rowCoords lived in state\n        };\n        this.handleMaxCushionWidth = (slotCushionMaxWidth) => {\n            this.setState({\n                slotCushionMaxWidth: Math.ceil(slotCushionMaxWidth), // for less rerendering TODO: DRY\n            });\n        };\n        // Scrolling\n        // ------------------------------------------------------------------------------------------------------------------\n        // this is useful for scrolling prev/next dates while resource is scrolled down\n        this.handleScrollLeftRequest = (scrollLeft) => {\n            let layout = this.layoutRef.current;\n            layout.forceTimeScroll(scrollLeft);\n        };\n        this.handleScrollRequest = (request) => {\n            let { rowCoords } = this;\n            let layout = this.layoutRef.current;\n            let rowId = request.rowId || request.resourceId;\n            if (rowCoords) {\n                if (rowId) {\n                    let rowIdToIndex = this.buildRowIndex(this.renderedRowNodes);\n                    let index = rowIdToIndex[rowId];\n                    if (index != null) {\n                        let scrollTop = (request.fromBottom != null ?\n                            rowCoords.bottoms[index] - request.fromBottom : // pixels from bottom edge\n                            rowCoords.tops[index] // just use top edge\n                        );\n                        layout.forceResourceScroll(scrollTop);\n                    }\n                }\n                return true;\n            }\n            return null;\n        };\n        // Resource INDIVIDUAL-Column Area Resizing\n        // ------------------------------------------------------------------------------------------\n        this.handleColWidthChange = (colWidths) => {\n            this.setState({\n                spreadsheetColWidths: colWidths,\n            });\n        };\n        this.state = {\n            resourceAreaWidth: context.options.resourceAreaWidth,\n            spreadsheetColWidths: [],\n        };\n    }\n    render() {\n        let { props, state, context } = this;\n        let { options, viewSpec } = context;\n        let { superHeaderRendering, groupSpecs, orderSpecs, isVGrouping, colSpecs } = this.processColOptions(context.options);\n        let tDateProfile = this.buildTimelineDateProfile(props.dateProfile, context.dateEnv, options, context.dateProfileGenerator);\n        let rowNodes = this.rowNodes = this.buildRowNodes(props.resourceStore, groupSpecs, orderSpecs, isVGrouping, props.resourceEntityExpansions, options.resourcesInitiallyExpanded);\n        let { slotMinWidth } = options;\n        let slatCols = buildSlatCols(tDateProfile, slotMinWidth || this.computeFallbackSlotMinWidth(tDateProfile));\n        return (createElement(ViewContainer, { elClasses: [\n                'fc-resource-timeline',\n                !this.hasNesting(rowNodes) && 'fc-resource-timeline-flat',\n                'fc-timeline',\n                options.eventOverlap === false ?\n                    'fc-timeline-overlap-disabled' :\n                    'fc-timeline-overlap-enabled',\n            ], viewSpec: viewSpec },\n            createElement(ResourceTimelineViewLayout, { ref: this.layoutRef, forPrint: props.forPrint, isHeightAuto: props.isHeightAuto, spreadsheetCols: buildSpreadsheetCols(colSpecs, state.spreadsheetColWidths, ''), spreadsheetHeaderRows: (contentArg) => (createElement(SpreadsheetHeader // TODO: rename to SpreadsheetHeaderRows\n                , { superHeaderRendering: superHeaderRendering, colSpecs: colSpecs, onColWidthChange: this.handleColWidthChange, rowInnerHeights: contentArg.rowSyncHeights })), spreadsheetBodyRows: (contentArg) => (createElement(Fragment, null, this.renderSpreadsheetRows(rowNodes, colSpecs, contentArg.rowSyncHeights))), timeCols: slatCols, timeHeaderContent: (contentArg) => (createElement(TimelineHeader, { clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, dateProfile: props.dateProfile, tDateProfile: tDateProfile, slatCoords: state.slatCoords, rowInnerHeights: contentArg.rowSyncHeights, onMaxCushionWidth: slotMinWidth ? null : this.handleMaxCushionWidth })), timeBodyContent: (contentArg) => (createElement(ResourceTimelineGrid, { dateProfile: props.dateProfile, clientWidth: contentArg.clientWidth, clientHeight: contentArg.clientHeight, tableMinWidth: contentArg.tableMinWidth, tableColGroupNode: contentArg.tableColGroupNode, expandRows: contentArg.expandRows, tDateProfile: tDateProfile, rowNodes: rowNodes, businessHours: props.businessHours, dateSelection: props.dateSelection, eventStore: props.eventStore, eventUiBases: props.eventUiBases, eventSelection: props.eventSelection, eventDrag: props.eventDrag, eventResize: props.eventResize, resourceStore: props.resourceStore, nextDayThreshold: context.options.nextDayThreshold, rowInnerHeights: contentArg.rowSyncHeights, onSlatCoords: this.handleSlatCoords, onRowCoords: this.handleRowCoords, onScrollLeftRequest: this.handleScrollLeftRequest, onRowHeightChange: contentArg.reportRowHeightChange })) })));\n    }\n    renderSpreadsheetRows(nodes, colSpecs, rowSyncHeights) {\n        return nodes.map((node, index) => {\n            if (node.group) {\n                return (createElement(SpreadsheetGroupRow, { key: node.id, id: node.id, spreadsheetColCnt: colSpecs.length, isExpanded: node.isExpanded, group: node.group, innerHeight: rowSyncHeights[index] || '' }));\n            }\n            if (node.resource) {\n                return (createElement(SpreadsheetRow, { key: node.id, colSpecs: colSpecs, rowSpans: node.rowSpans, depth: node.depth, isExpanded: node.isExpanded, hasChildren: node.hasChildren, resource: node.resource, innerHeight: rowSyncHeights[index] || '' }));\n            }\n            return null;\n        });\n    }\n    componentDidMount() {\n        this.renderedRowNodes = this.rowNodes;\n        this.scrollResponder = this.context.createScrollResponder(this.handleScrollRequest);\n    }\n    getSnapshotBeforeUpdate() {\n        if (!this.props.forPrint) { // because print-view is always zero?\n            return { resourceScroll: this.queryResourceScroll() };\n        }\n        return {};\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.renderedRowNodes = this.rowNodes;\n        this.scrollResponder.update(prevProps.dateProfile !== this.props.dateProfile);\n        if (snapshot.resourceScroll) {\n            this.handleScrollRequest(snapshot.resourceScroll); // TODO: this gets triggered too often\n        }\n    }\n    componentWillUnmount() {\n        this.scrollResponder.detach();\n    }\n    computeFallbackSlotMinWidth(tDateProfile) {\n        return Math.max(30, ((this.state.slotCushionMaxWidth || 0) / tDateProfile.slotsPerLabel));\n    }\n    queryResourceScroll() {\n        let { rowCoords, renderedRowNodes } = this;\n        if (rowCoords) {\n            let layout = this.layoutRef.current;\n            let trBottoms = rowCoords.bottoms;\n            let scrollTop = layout.getResourceScroll();\n            let scroll = {};\n            for (let i = 0; i < trBottoms.length; i += 1) {\n                let rowNode = renderedRowNodes[i];\n                let elBottom = trBottoms[i] - scrollTop; // from the top of the scroller\n                if (elBottom > 0) {\n                    scroll.rowId = rowNode.id;\n                    scroll.fromBottom = elBottom;\n                    break;\n                }\n            }\n            return scroll;\n        }\n        return null;\n    }\n}\nResourceTimelineView.addStateEquality({\n    spreadsheetColWidths: isArraysEqual,\n});\nfunction buildRowIndex(rowNodes) {\n    let rowIdToIndex = {};\n    for (let i = 0; i < rowNodes.length; i += 1) {\n        rowIdToIndex[rowNodes[i].id] = i;\n    }\n    return rowIdToIndex;\n}\nfunction buildSpreadsheetCols(colSpecs, forcedWidths, fallbackWidth = '') {\n    return colSpecs.map((colSpec, i) => ({\n        className: colSpec.isMain ? 'fc-main-col' : '',\n        width: forcedWidths[i] || colSpec.width || fallbackWidth,\n    }));\n}\nfunction hasNesting(nodes) {\n    for (let node of nodes) {\n        if (node.group) {\n            return true;\n        }\n        if (node.resource) {\n            if (node.hasChildren) {\n                return true;\n            }\n        }\n    }\n    return false;\n}\nfunction processColOptions(options) {\n    let allColSpecs = options.resourceAreaColumns || [];\n    let superHeaderRendering = null;\n    if (!allColSpecs.length) {\n        allColSpecs.push({\n            headerClassNames: options.resourceAreaHeaderClassNames,\n            headerContent: options.resourceAreaHeaderContent,\n            headerDefault: () => 'Resources',\n            headerDidMount: options.resourceAreaHeaderDidMount,\n            headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n        });\n    }\n    else if (options.resourceAreaHeaderContent) { // weird way to determine if content\n        superHeaderRendering = {\n            headerClassNames: options.resourceAreaHeaderClassNames,\n            headerContent: options.resourceAreaHeaderContent,\n            headerDidMount: options.resourceAreaHeaderDidMount,\n            headerWillUnmount: options.resourceAreaHeaderWillUnmount,\n        };\n    }\n    let plainColSpecs = [];\n    let groupColSpecs = []; // part of the colSpecs, but filtered out in order to put first\n    let groupSpecs = [];\n    let isVGrouping = false;\n    for (let colSpec of allColSpecs) {\n        if (colSpec.group) {\n            groupColSpecs.push(Object.assign(Object.assign({}, colSpec), { cellClassNames: colSpec.cellClassNames || options.resourceGroupLabelClassNames, cellContent: colSpec.cellContent || options.resourceGroupLabelContent, cellDidMount: colSpec.cellDidMount || options.resourceGroupLabelDidMount, cellWillUnmount: colSpec.cellWillUnmount || options.resourceGroupLaneWillUnmount }));\n        }\n        else {\n            plainColSpecs.push(colSpec);\n        }\n    }\n    // BAD: mutates a user-supplied option\n    let mainColSpec = plainColSpecs[0];\n    mainColSpec.isMain = true;\n    mainColSpec.cellClassNames = mainColSpec.cellClassNames || options.resourceLabelClassNames;\n    mainColSpec.cellContent = mainColSpec.cellContent || options.resourceLabelContent;\n    mainColSpec.cellDidMount = mainColSpec.cellDidMount || options.resourceLabelDidMount;\n    mainColSpec.cellWillUnmount = mainColSpec.cellWillUnmount || options.resourceLabelWillUnmount;\n    if (groupColSpecs.length) {\n        groupSpecs = groupColSpecs;\n        isVGrouping = true;\n    }\n    else {\n        let hGroupField = options.resourceGroupField;\n        if (hGroupField) {\n            groupSpecs.push({\n                field: hGroupField,\n                labelClassNames: options.resourceGroupLabelClassNames,\n                labelContent: options.resourceGroupLabelContent,\n                labelDidMount: options.resourceGroupLabelDidMount,\n                labelWillUnmount: options.resourceGroupLabelWillUnmount,\n                laneClassNames: options.resourceGroupLaneClassNames,\n                laneContent: options.resourceGroupLaneContent,\n                laneDidMount: options.resourceGroupLaneDidMount,\n                laneWillUnmount: options.resourceGroupLaneWillUnmount,\n            });\n        }\n    }\n    let allOrderSpecs = options.resourceOrder || DEFAULT_RESOURCE_ORDER;\n    let plainOrderSpecs = [];\n    for (let orderSpec of allOrderSpecs) {\n        let isGroup = false;\n        for (let groupSpec of groupSpecs) {\n            if (groupSpec.field === orderSpec.field) {\n                groupSpec.order = orderSpec.order; // -1, 0, 1\n                isGroup = true;\n                break;\n            }\n        }\n        if (!isGroup) {\n            plainOrderSpecs.push(orderSpec);\n        }\n    }\n    return {\n        superHeaderRendering,\n        isVGrouping,\n        groupSpecs,\n        colSpecs: groupColSpecs.concat(plainColSpecs),\n        orderSpecs: plainOrderSpecs,\n    };\n}\n\nvar css_248z = \".fc .fc-resource-timeline-divider{cursor:col-resize;width:3px}.fc .fc-resource-group{font-weight:inherit;text-align:inherit}.fc .fc-resource-timeline .fc-resource-group:not([rowspan]){background:var(--fc-neutral-bg-color)}.fc .fc-timeline-lane-frame{position:relative}.fc .fc-timeline-overlap-enabled .fc-timeline-lane-frame .fc-timeline-events{box-sizing:content-box;padding-bottom:10px}.fc-timeline-body-expandrows td.fc-timeline-lane{position:relative}.fc-timeline-body-expandrows .fc-timeline-lane-frame{position:static}.fc-datagrid-cell-frame-liquid{height:100%}.fc-liquid-hack .fc-datagrid-cell-frame-liquid{bottom:0;height:auto;left:0;position:absolute;right:0;top:0}.fc .fc-datagrid-header .fc-datagrid-cell-frame{align-items:center;display:flex;justify-content:flex-start;position:relative}.fc .fc-datagrid-cell-resizer{bottom:0;cursor:col-resize;position:absolute;top:0;width:5px;z-index:1}.fc .fc-datagrid-cell-cushion{overflow:hidden;padding:8px;white-space:nowrap}.fc .fc-datagrid-expander{cursor:pointer;opacity:.65}.fc .fc-datagrid-expander .fc-icon{display:inline-block;width:1em}.fc .fc-datagrid-expander-placeholder{cursor:auto}.fc .fc-resource-timeline-flat .fc-datagrid-expander-placeholder{display:none}.fc-direction-ltr .fc-datagrid-cell-resizer{right:-3px}.fc-direction-rtl .fc-datagrid-cell-resizer{left:-3px}.fc-direction-ltr .fc-datagrid-expander{margin-right:3px}.fc-direction-rtl .fc-datagrid-expander{margin-left:3px}\";\ninjectStyles(css_248z);\n\nexport { ResourceTimelineLane, ResourceTimelineView, SpreadsheetRow };\n", "import { createPlugin } from '@fullcalendar/core/index.js';\nimport premiumCommonPlugin from '@fullcalendar/premium-common/index.js';\nimport timelinePlugin from '@fullcalendar/timeline/index.js';\nimport resourcePlugin from '@fullcalendar/resource/index.js';\nimport { ResourceTimelineView } from './internal.js';\nimport '@fullcalendar/core/internal.js';\nimport '@fullcalendar/core/preact.js';\nimport '@fullcalendar/timeline/internal.js';\nimport '@fullcalendar/resource/internal.js';\nimport '@fullcalendar/scrollgrid/internal.js';\n\nvar index = createPlugin({\n    name: '@fullcalendar/resource-timeline',\n    premiumReleaseDate: '2024-07-12',\n    deps: [\n        premiumCommonPlugin,\n        resourcePlugin,\n        timelinePlugin,\n    ],\n    initialView: 'resourceTimelineDay',\n    views: {\n        resourceTimeline: {\n            type: 'timeline',\n            component: ResourceTimelineView,\n            needsResourceData: true,\n            resourceAreaWidth: '30%',\n            resourcesInitiallyExpanded: true,\n            eventResizableFromStart: true, // TODO: not DRY with this same setting in the main timeline config\n        },\n        resourceTimelineDay: {\n            type: 'resourceTimeline',\n            duration: { days: 1 },\n        },\n        resourceTimelineWeek: {\n            type: 'resourceTimeline',\n            duration: { weeks: 1 },\n        },\n        resourceTimelineMonth: {\n            type: 'resourceTimeline',\n            duration: { months: 1 },\n        },\n        resourceTimelineYear: {\n            type: 'resourceTimeline',\n            duration: { years: 1 },\n        },\n    },\n});\n\nexport { index as default };\n"],
  "mappings": "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",
  "names": ["index", "refineRenderProps", "rowInnerHeight", "index", "css_248z", "index"]
}
